["^ ","~:output",["^ ","~:js","goog.provide('mranderson048.re_frame.v0v10v6.re_frame.subs');\ngoog.require('cljs.core');\ngoog.require('mranderson048.re_frame.v0v10v6.re_frame.db');\ngoog.require('mranderson048.re_frame.v0v10v6.re_frame.interop');\ngoog.require('mranderson048.re_frame.v0v10v6.re_frame.loggers');\ngoog.require('mranderson048.re_frame.v0v10v6.re_frame.utils');\ngoog.require('mranderson048.re_frame.v0v10v6.re_frame.registrar');\ngoog.require('mranderson048.re_frame.v0v10v6.re_frame.trace');\nmranderson048.re_frame.v0v10v6.re_frame.subs.kind = new cljs.core.Keyword(null,\"sub\",\"sub\",-2093760025);\nif(cljs.core.truth_((mranderson048.re_frame.v0v10v6.re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1 ? mranderson048.re_frame.v0v10v6.re_frame.registrar.kinds.cljs$core$IFn$_invoke$arity$1(mranderson048.re_frame.v0v10v6.re_frame.subs.kind) : mranderson048.re_frame.v0v10v6.re_frame.registrar.kinds.call(null,mranderson048.re_frame.v0v10v6.re_frame.subs.kind)))){\n} else {\nthrow (new Error(\"Assert failed: (mranderson048.re-frame.v0v10v6.re-frame.registrar/kinds kind)\"));\n}\nmranderson048.re_frame.v0v10v6.re_frame.subs.query__GT_reaction = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\n/**\n * Causes all subscriptions to be removed from the cache.\n *   Does this by:\n *   1. running on-dispose on all cached subscriptions\n *   2. These on-dispose will then do the removal of themselves.\n * \n *   This is a development time tool. Useful when reloading Figwheel code\n *   after a React exception, because React components won't have been\n *   cleaned up properly. And this, in turn, means the subscriptions within those\n *   components won't have been cleaned up correctly. So this forces the issue.\n */\nmranderson048.re_frame.v0v10v6.re_frame.subs.clear_subscription_cache_BANG_ = (function mranderson048$re_frame$v0v10v6$re_frame$subs$clear_subscription_cache_BANG_(){\nvar seq__21508_21617 = cljs.core.seq(cljs.core.deref(mranderson048.re_frame.v0v10v6.re_frame.subs.query__GT_reaction));\nvar chunk__21509_21618 = null;\nvar count__21510_21619 = (0);\nvar i__21511_21620 = (0);\nwhile(true){\nif((i__21511_21620 < count__21510_21619)){\nvar vec__21522_21621 = chunk__21509_21618.cljs$core$IIndexed$_nth$arity$2(null,i__21511_21620);\nvar k_21622 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21522_21621,(0),null);\nvar rxn_21623 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21522_21621,(1),null);\nmranderson048.re_frame.v0v10v6.re_frame.interop.dispose_BANG_(rxn_21623);\n\n\nvar G__21624 = seq__21508_21617;\nvar G__21625 = chunk__21509_21618;\nvar G__21626 = count__21510_21619;\nvar G__21627 = (i__21511_21620 + (1));\nseq__21508_21617 = G__21624;\nchunk__21509_21618 = G__21625;\ncount__21510_21619 = G__21626;\ni__21511_21620 = G__21627;\ncontinue;\n} else {\nvar temp__5457__auto___21628 = cljs.core.seq(seq__21508_21617);\nif(temp__5457__auto___21628){\nvar seq__21508_21631__$1 = temp__5457__auto___21628;\nif(cljs.core.chunked_seq_QMARK_(seq__21508_21631__$1)){\nvar c__4550__auto___21632 = cljs.core.chunk_first(seq__21508_21631__$1);\nvar G__21633 = cljs.core.chunk_rest(seq__21508_21631__$1);\nvar G__21634 = c__4550__auto___21632;\nvar G__21635 = cljs.core.count(c__4550__auto___21632);\nvar G__21636 = (0);\nseq__21508_21617 = G__21633;\nchunk__21509_21618 = G__21634;\ncount__21510_21619 = G__21635;\ni__21511_21620 = G__21636;\ncontinue;\n} else {\nvar vec__21525_21639 = cljs.core.first(seq__21508_21631__$1);\nvar k_21640 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21525_21639,(0),null);\nvar rxn_21641 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21525_21639,(1),null);\nmranderson048.re_frame.v0v10v6.re_frame.interop.dispose_BANG_(rxn_21641);\n\n\nvar G__21642 = cljs.core.next(seq__21508_21631__$1);\nvar G__21643 = null;\nvar G__21644 = (0);\nvar G__21645 = (0);\nseq__21508_21617 = G__21642;\nchunk__21509_21618 = G__21643;\ncount__21510_21619 = G__21644;\ni__21511_21620 = G__21645;\ncontinue;\n}\n} else {\n}\n}\nbreak;\n}\n\nif(cljs.core.truth_(cljs.core.not_empty(cljs.core.deref(mranderson048.re_frame.v0v10v6.re_frame.subs.query__GT_reaction)))){\nreturn mranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"Subscription cache should be empty after clearing it.\"], 0));\n} else {\nreturn null;\n}\n});\n/**\n * Unregisters all existing subscription handlers\n */\nmranderson048.re_frame.v0v10v6.re_frame.subs.clear_all_handlers_BANG_ = (function mranderson048$re_frame$v0v10v6$re_frame$subs$clear_all_handlers_BANG_(){\nmranderson048.re_frame.v0v10v6.re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1(mranderson048.re_frame.v0v10v6.re_frame.subs.kind);\n\nreturn mranderson048.re_frame.v0v10v6.re_frame.subs.clear_subscription_cache_BANG_();\n});\n/**\n * cache the reaction r\n */\nmranderson048.re_frame.v0v10v6.re_frame.subs.cache_and_return = (function mranderson048$re_frame$v0v10v6$re_frame$subs$cache_and_return(query_v,dynv,r){\nvar cache_key = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_v,dynv], null);\nmranderson048.re_frame.v0v10v6.re_frame.interop.add_on_dispose_BANG_(r,((function (cache_key){\nreturn (function (){\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__21530 = mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__21531 = mranderson048.re_frame.v0v10v6.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),mranderson048.re_frame.v0v10v6.re_frame.utils.first_in_vector(query_v),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"dispose\",\"sub/dispose\",365440536),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_v,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id(r)], null)], null));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__21531;\n\ntry{try{return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(mranderson048.re_frame.v0v10v6.re_frame.subs.query__GT_reaction,((function (_STAR_current_trace_STAR__orig_val__21530,_STAR_current_trace_STAR__temp_val__21531,cache_key){\nreturn (function (query_cache){\nif(((cljs.core.contains_QMARK_(query_cache,cache_key)) && ((r === cljs.core.get.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key))))){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key);\n} else {\nreturn query_cache;\n}\n});})(_STAR_current_trace_STAR__orig_val__21530,_STAR_current_trace_STAR__temp_val__21531,cache_key))\n);\n}finally {if(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__21429__auto___21646 = mranderson048.re_frame.v0v10v6.re_frame.interop.now();\nvar duration__21430__auto___21647 = (end__21429__auto___21646 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(mranderson048.re_frame.v0v10v6.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__21430__auto___21647,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),mranderson048.re_frame.v0v10v6.re_frame.interop.now()], 0)));\n\nmranderson048.re_frame.v0v10v6.re_frame.trace.run_tracing_callbacks_BANG_(end__21429__auto___21646);\n} else {\n}\n}}finally {mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__21530;\n}} else {\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(mranderson048.re_frame.v0v10v6.re_frame.subs.query__GT_reaction,((function (cache_key){\nreturn (function (query_cache){\nif(((cljs.core.contains_QMARK_(query_cache,cache_key)) && ((r === cljs.core.get.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key))))){\nreturn cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(query_cache,cache_key);\n} else {\nreturn query_cache;\n}\n});})(cache_key))\n);\n}\n});})(cache_key))\n);\n\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(mranderson048.re_frame.v0v10v6.re_frame.subs.query__GT_reaction,((function (cache_key){\nreturn (function (query_cache){\nif(mranderson048.re_frame.v0v10v6.re_frame.interop.debug_enabled_QMARK_){\nif(cljs.core.contains_QMARK_(query_cache,cache_key)){\nmranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\",cache_key], 0));\n} else {\n}\n} else {\n}\n\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(query_cache,cache_key,r);\n});})(cache_key))\n);\n\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21648 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id(r)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id(r)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21648;\n\n} else {\n}\n\nreturn r;\n});\nmranderson048.re_frame.v0v10v6.re_frame.subs.cache_lookup = (function mranderson048$re_frame$v0v10v6$re_frame$subs$cache_lookup(var_args){\nvar G__21539 = arguments.length;\nswitch (G__21539) {\ncase 1:\nreturn mranderson048.re_frame.v0v10v6.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn mranderson048.re_frame.v0v10v6.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nmranderson048.re_frame.v0v10v6.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1 = (function (query_v){\nreturn mranderson048.re_frame.v0v10v6.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query_v,cljs.core.PersistentVector.EMPTY);\n});\n\nmranderson048.re_frame.v0v10v6.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2 = (function (query_v,dyn_v){\nreturn cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.deref(mranderson048.re_frame.v0v10v6.re_frame.subs.query__GT_reaction),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [query_v,dyn_v], null));\n});\n\nmranderson048.re_frame.v0v10v6.re_frame.subs.cache_lookup.cljs$lang$maxFixedArity = 2;\n\n/**\n * Given a `query`, returns a Reagent `reaction` which, over\n *   time, reactively delivers a stream of values. So in FRP-ish terms,\n *   it returns a Signal.\n * \n *   To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n * \n *   `query` is a vector of at least one element. The first element is the\n *   `query-id`, typically a namespaced keyword. The rest of the vector's\n *   elements are optional, additional values which parameterise the query\n *   performed.\n * \n *   `dynv` is an optional 3rd argument, `which is a vector of further input\n *   signals (atoms, reactions, etc), NOT values. This argument exists for\n *   historical reasons and is borderline deprecated these days.\n * \n *   Example Usage:\n *   --------------\n * \n *  (subscribe [:items])\n *  (subscribe [:items \"blue\" :small])\n *  (subscribe [:items {:colour \"blue\"  :size :small}])\n * \n *   Note: for any given call to `subscribe` there must have been a previous call\n *   to `reg-sub`, registering the query handler (function) for the `query-id` given.\n * \n *   Hint\n *   ----\n * \n *   When used in a view function BE SURE to `deref` the returned value.\n *   In fact, to avoid any mistakes, some prefer to define:\n * \n *   (def <sub  (comp deref mranderson048.re-frame.v0v10v6.re-frame.core/subscribe))\n * \n *   And then, within their views, they call  `(<sub [:items :small])` rather\n *   than using `subscribe` directly.\n * \n *   De-duplication\n *   --------------\n * \n *   XXX\n *   \n */\nmranderson048.re_frame.v0v10v6.re_frame.subs.subscribe = (function mranderson048$re_frame$v0v10v6$re_frame$subs$subscribe(var_args){\nvar G__21541 = arguments.length;\nswitch (G__21541) {\ncase 1:\nreturn mranderson048.re_frame.v0v10v6.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn mranderson048.re_frame.v0v10v6.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nmranderson048.re_frame.v0v10v6.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1 = (function (query){\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__21542 = mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__21543 = mranderson048.re_frame.v0v10v6.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),mranderson048.re_frame.v0v10v6.re_frame.utils.first_in_vector(query),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"create\",\"sub/create\",-1301317560),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query], null)], null));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__21543;\n\ntry{try{var temp__5455__auto__ = mranderson048.re_frame.v0v10v6.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1(query);\nif(cljs.core.truth_(temp__5455__auto__)){\nvar cached = temp__5455__auto__;\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21654 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21654;\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = mranderson048.re_frame.v0v10v6.re_frame.utils.first_in_vector(query);\nvar handler_fn = mranderson048.re_frame.v0v10v6.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(mranderson048.re_frame.v0v10v6.re_frame.subs.kind,query_id);\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21655 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21655;\n\n} else {\n}\n\nif((handler_fn == null)){\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21656 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21656;\n\n} else {\n}\n\nreturn mranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nreturn mranderson048.re_frame.v0v10v6.re_frame.subs.cache_and_return(query,cljs.core.PersistentVector.EMPTY,(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(mranderson048.re_frame.v0v10v6.re_frame.db.app_db,query) : handler_fn.call(null,mranderson048.re_frame.v0v10v6.re_frame.db.app_db,query)));\n}\n}\n}finally {if(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__21429__auto___21657 = mranderson048.re_frame.v0v10v6.re_frame.interop.now();\nvar duration__21430__auto___21658 = (end__21429__auto___21657 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(mranderson048.re_frame.v0v10v6.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__21430__auto___21658,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),mranderson048.re_frame.v0v10v6.re_frame.interop.now()], 0)));\n\nmranderson048.re_frame.v0v10v6.re_frame.trace.run_tracing_callbacks_BANG_(end__21429__auto___21657);\n} else {\n}\n}}finally {mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__21542;\n}} else {\nvar temp__5455__auto__ = mranderson048.re_frame.v0v10v6.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1(query);\nif(cljs.core.truth_(temp__5455__auto__)){\nvar cached = temp__5455__auto__;\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21659 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21659;\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = mranderson048.re_frame.v0v10v6.re_frame.utils.first_in_vector(query);\nvar handler_fn = mranderson048.re_frame.v0v10v6.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(mranderson048.re_frame.v0v10v6.re_frame.subs.kind,query_id);\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21660 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21660;\n\n} else {\n}\n\nif((handler_fn == null)){\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21661 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21661;\n\n} else {\n}\n\nreturn mranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nreturn mranderson048.re_frame.v0v10v6.re_frame.subs.cache_and_return(query,cljs.core.PersistentVector.EMPTY,(handler_fn.cljs$core$IFn$_invoke$arity$2 ? handler_fn.cljs$core$IFn$_invoke$arity$2(mranderson048.re_frame.v0v10v6.re_frame.db.app_db,query) : handler_fn.call(null,mranderson048.re_frame.v0v10v6.re_frame.db.app_db,query)));\n}\n}\n}\n});\n\nmranderson048.re_frame.v0v10v6.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$2 = (function (query,dynv){\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__21546 = mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__21547 = mranderson048.re_frame.v0v10v6.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),mranderson048.re_frame.v0v10v6.re_frame.utils.first_in_vector(query),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"create\",\"sub/create\",-1301317560),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query,new cljs.core.Keyword(null,\"dyn-v\",\"dyn-v\",949994592),dynv], null)], null));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__21547;\n\ntry{try{var temp__5455__auto__ = mranderson048.re_frame.v0v10v6.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query,dynv);\nif(cljs.core.truth_(temp__5455__auto__)){\nvar cached = temp__5455__auto__;\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21662 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21662;\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = mranderson048.re_frame.v0v10v6.re_frame.utils.first_in_vector(query);\nvar handler_fn = mranderson048.re_frame.v0v10v6.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(mranderson048.re_frame.v0v10v6.re_frame.subs.kind,query_id);\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21668 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21668;\n\n} else {\n}\n\nif(mranderson048.re_frame.v0v10v6.re_frame.interop.debug_enabled_QMARK_){\nvar temp__5457__auto___21669 = cljs.core.not_empty(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(mranderson048.re_frame.v0v10v6.re_frame.interop.ratom_QMARK_,dynv));\nif(cljs.core.truth_(temp__5457__auto___21669)){\nvar not_reactive_21670 = temp__5457__auto___21669;\nmranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\",not_reactive_21670], 0));\n} else {\n}\n} else {\n}\n\nif((handler_fn == null)){\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21671 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21671;\n\n} else {\n}\n\nreturn mranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nvar dyn_vals = mranderson048.re_frame.v0v10v6.re_frame.interop.make_reaction(((function (query_id,handler_fn,temp__5455__auto__,_STAR_current_trace_STAR__orig_val__21546,_STAR_current_trace_STAR__temp_val__21547){\nreturn (function (){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,dynv);\n});})(query_id,handler_fn,temp__5455__auto__,_STAR_current_trace_STAR__orig_val__21546,_STAR_current_trace_STAR__temp_val__21547))\n);\nvar sub = mranderson048.re_frame.v0v10v6.re_frame.interop.make_reaction(((function (dyn_vals,query_id,handler_fn,temp__5455__auto__,_STAR_current_trace_STAR__orig_val__21546,_STAR_current_trace_STAR__temp_val__21547){\nreturn (function (){\nvar G__21551 = mranderson048.re_frame.v0v10v6.re_frame.db.app_db;\nvar G__21552 = query;\nvar G__21553 = cljs.core.deref(dyn_vals);\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$3 ? handler_fn.cljs$core$IFn$_invoke$arity$3(G__21551,G__21552,G__21553) : handler_fn.call(null,G__21551,G__21552,G__21553));\n});})(dyn_vals,query_id,handler_fn,temp__5455__auto__,_STAR_current_trace_STAR__orig_val__21546,_STAR_current_trace_STAR__temp_val__21547))\n);\nreturn mranderson048.re_frame.v0v10v6.re_frame.subs.cache_and_return(query,dynv,mranderson048.re_frame.v0v10v6.re_frame.interop.make_reaction(((function (dyn_vals,sub,query_id,handler_fn,temp__5455__auto__,_STAR_current_trace_STAR__orig_val__21546,_STAR_current_trace_STAR__temp_val__21547){\nreturn (function (){\nreturn cljs.core.deref(cljs.core.deref(sub));\n});})(dyn_vals,sub,query_id,handler_fn,temp__5455__auto__,_STAR_current_trace_STAR__orig_val__21546,_STAR_current_trace_STAR__temp_val__21547))\n));\n}\n}\n}finally {if(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__21429__auto___21672 = mranderson048.re_frame.v0v10v6.re_frame.interop.now();\nvar duration__21430__auto___21673 = (end__21429__auto___21672 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(mranderson048.re_frame.v0v10v6.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__21430__auto___21673,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),mranderson048.re_frame.v0v10v6.re_frame.interop.now()], 0)));\n\nmranderson048.re_frame.v0v10v6.re_frame.trace.run_tracing_callbacks_BANG_(end__21429__auto___21672);\n} else {\n}\n}}finally {mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__21546;\n}} else {\nvar temp__5455__auto__ = mranderson048.re_frame.v0v10v6.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2(query,dynv);\nif(cljs.core.truth_(temp__5455__auto__)){\nvar cached = temp__5455__auto__;\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21674 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id(cached)], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),true,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id(cached)], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21674;\n\n} else {\n}\n\nreturn cached;\n} else {\nvar query_id = mranderson048.re_frame.v0v10v6.re_frame.utils.first_in_vector(query);\nvar handler_fn = mranderson048.re_frame.v0v10v6.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2(mranderson048.re_frame.v0v10v6.re_frame.subs.kind,query_id);\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21679 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"cached?\",\"cached?\",86081880),false], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21679;\n\n} else {\n}\n\nif(mranderson048.re_frame.v0v10v6.re_frame.interop.debug_enabled_QMARK_){\nvar temp__5457__auto___21680 = cljs.core.not_empty(cljs.core.remove.cljs$core$IFn$_invoke$arity$2(mranderson048.re_frame.v0v10v6.re_frame.interop.ratom_QMARK_,dynv));\nif(cljs.core.truth_(temp__5457__auto___21680)){\nvar not_reactive_21681 = temp__5457__auto___21680;\nmranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\",not_reactive_21681], 0));\n} else {\n}\n} else {\n}\n\nif((handler_fn == null)){\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21682 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"error\",\"error\",-978969032),true], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21682;\n\n} else {\n}\n\nreturn mranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([[\"re-frame: no subscription handler registered for: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\". Returning a nil subscription.\"].join('')], 0));\n} else {\nvar dyn_vals = mranderson048.re_frame.v0v10v6.re_frame.interop.make_reaction(((function (query_id,handler_fn,temp__5455__auto__){\nreturn (function (){\nreturn cljs.core.mapv.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,dynv);\n});})(query_id,handler_fn,temp__5455__auto__))\n);\nvar sub = mranderson048.re_frame.v0v10v6.re_frame.interop.make_reaction(((function (dyn_vals,query_id,handler_fn,temp__5455__auto__){\nreturn (function (){\nvar G__21558 = mranderson048.re_frame.v0v10v6.re_frame.db.app_db;\nvar G__21559 = query;\nvar G__21560 = cljs.core.deref(dyn_vals);\nreturn (handler_fn.cljs$core$IFn$_invoke$arity$3 ? handler_fn.cljs$core$IFn$_invoke$arity$3(G__21558,G__21559,G__21560) : handler_fn.call(null,G__21558,G__21559,G__21560));\n});})(dyn_vals,query_id,handler_fn,temp__5455__auto__))\n);\nreturn mranderson048.re_frame.v0v10v6.re_frame.subs.cache_and_return(query,dynv,mranderson048.re_frame.v0v10v6.re_frame.interop.make_reaction(((function (dyn_vals,sub,query_id,handler_fn,temp__5455__auto__){\nreturn (function (){\nreturn cljs.core.deref(cljs.core.deref(sub));\n});})(dyn_vals,sub,query_id,handler_fn,temp__5455__auto__))\n));\n}\n}\n}\n});\n\nmranderson048.re_frame.v0v10v6.re_frame.subs.subscribe.cljs$lang$maxFixedArity = 2;\n\n/**\n * Returns a new version of 'm' in which 'f' has been applied to each value.\n *   (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\n */\nmranderson048.re_frame.v0v10v6.re_frame.subs.map_vals = (function mranderson048$re_frame$v0v10v6$re_frame$subs$map_vals(f,m){\nreturn cljs.core.into.cljs$core$IFn$_invoke$arity$3(cljs.core.empty(m),cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p__21564){\nvar vec__21565 = p__21564;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21565,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21565,(1),null);\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(v) : f.call(null,v))], null);\n})),m);\n});\n/**\n * Runs f over signals. Signals may take several\n *   forms, this function handles all of them.\n */\nmranderson048.re_frame.v0v10v6.re_frame.subs.map_signals = (function mranderson048$re_frame$v0v10v6$re_frame$subs$map_signals(f,signals){\nif(cljs.core.sequential_QMARK_(signals)){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(f,signals);\n} else {\nif(cljs.core.map_QMARK_(signals)){\nreturn mranderson048.re_frame.v0v10v6.re_frame.subs.map_vals(f,signals);\n} else {\nif(mranderson048.re_frame.v0v10v6.re_frame.interop.deref_QMARK_(signals)){\nreturn (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(signals) : f.call(null,signals));\n} else {\nreturn cljs.core.List.EMPTY;\n\n}\n}\n}\n});\n/**\n * Coerces x to a seq if it isn't one already\n */\nmranderson048.re_frame.v0v10v6.re_frame.subs.to_seq = (function mranderson048$re_frame$v0v10v6$re_frame$subs$to_seq(x){\nif(cljs.core.sequential_QMARK_(x)){\nreturn x;\n} else {\nreturn (new cljs.core.List(null,x,null,(1),null));\n}\n});\nmranderson048.re_frame.v0v10v6.re_frame.subs.deref_input_signals = (function mranderson048$re_frame$v0v10v6$re_frame$subs$deref_input_signals(signals,query_id){\nvar dereffed_signals = mranderson048.re_frame.v0v10v6.re_frame.subs.map_signals(cljs.core.deref,signals);\nif(cljs.core.sequential_QMARK_(signals)){\ncljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.deref,signals);\n} else {\nif(cljs.core.map_QMARK_(signals)){\nmranderson048.re_frame.v0v10v6.re_frame.subs.map_vals(cljs.core.deref,signals);\n} else {\nif(mranderson048.re_frame.v0v10v6.re_frame.interop.deref_QMARK_(signals)){\ncljs.core.deref(signals);\n} else {\nmranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([\"re-frame: in the reg-sub for\",query_id,\", the input-signals function returns:\",signals], 0));\n\n}\n}\n}\n\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21685 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"input-signals\",\"input-signals\",563633497),cljs.core.doall.cljs$core$IFn$_invoke$arity$1(mranderson048.re_frame.v0v10v6.re_frame.subs.to_seq(mranderson048.re_frame.v0v10v6.re_frame.subs.map_signals(mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id,signals)))], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"input-signals\",\"input-signals\",563633497),cljs.core.doall.cljs$core$IFn$_invoke$arity$1(mranderson048.re_frame.v0v10v6.re_frame.subs.to_seq(mranderson048.re_frame.v0v10v6.re_frame.subs.map_signals(mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id,signals)))], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21685;\n\n} else {\n}\n\nreturn dereffed_signals;\n});\n/**\n * For a given `query-id`, register a `computation` function and input `signals`.\n * \n *   At an abstract level, a call to this function allows you to register 'the mechanism'\n *   to later fulfil a call to `(subscribe [query-id ...])`.\n * \n *   To say that another way, reg-sub allows you to create a template for a node\n *   in the signal graph. But note: reg-sub does not cause a node to be created.\n *   It simply allows you to register the template from which such a\n *   node could be created, if it were needed, sometime later, when the call\n *   to `subscribe` is made.\n * \n *   reg-sub needs three things:\n *  - a `query-id`\n *  - the required inputs for this node\n *  - a computation function for this node\n * \n *   The `query-id` is always the 1st argument to reg-sub and it is typically\n *   a namespaced keyword.\n * \n *   A computation function is always the last argument and it has this general form:\n *  `(input-signals, query-vector) -> a-value`\n * \n *   What goes in between the 1st and last args can vary, but whatever is there will\n *   define the input signals part of the template, and, as a result, it will control\n *   what values the computation functions gets as a first argument.\n * \n *   There's 3 ways this function can be called - 3 ways to supply input signals:\n * \n *   1. No input signals given:\n * \n *   (reg-sub\n *     :query-id\n *     a-computation-fn)   ;; (fn [db v]  ... a-value)\n * \n *   The node's input signal defaults to `app-db`, and the value within `app-db` is\n *   is given as the 1st argument to the computation function.\n * \n *   2. A signal function is supplied:\n * \n *   (reg-sub\n *     :query-id\n *     signal-fn     ;; <-- here\n *     computation-fn)\n * \n *   When a node is created from the template, the `signal-fn` will be called and it\n *   is expected to return the input signal(s) as either a singleton, if there is only\n *   one, or a sequence if there are many, or a map with the signals as the values.\n * \n *   The values from the nominated signals will be supplied as the 1st argument to the\n *   computation function - either a singleton, sequence or map of them, paralleling\n *   the structure returned by the signal function.\n * \n *   Here, is an example signal-fn, which returns a vector of input signals.\n * \n *     (fn [query-vec dynamic-vec]\n *       [(subscribe [:a-sub])\n *        (subscribe [:b-sub])])\n * \n *   For that signal function, the computation function must be written\n *   to expect a vector of values for its first argument.\n *     (fn [[a b] _] ....)\n * \n *   If the signal function was simpler and returned a singleton, like this:\n *      (fn [query-vec dynamic-vec]\n *        (subscribe [:a-sub]))\n * \n *   then the computation function must be written to expect a single value\n *   as the 1st argument:\n * \n *      (fn [a _] ...)\n * \n *   3. Syntax Sugar\n * \n *   (reg-sub\n *     :a-b-sub\n *     :<- [:a-sub]\n *     :<- [:b-sub]\n *     (fn [[a b] [_]] {:a a :b b}))\n * \n *   This 3rd variation is syntactic sugar for the 2nd. Pairs are supplied instead\n *   of an `input signals` functions. Each pair starts with a `:<-` and a subscription\n *   vector follows.\n * \n *   For further understanding, read `/docs`, and look at the detailed comments in\n *   /examples/todomvc/src/subs.cljs\n *   \n */\nmranderson048.re_frame.v0v10v6.re_frame.subs.reg_sub = (function mranderson048$re_frame$v0v10v6$re_frame$subs$reg_sub(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___21687 = arguments.length;\nvar i__4731__auto___21688 = (0);\nwhile(true){\nif((i__4731__auto___21688 < len__4730__auto___21687)){\nargs__4736__auto__.push((arguments[i__4731__auto___21688]));\n\nvar G__21689 = (i__4731__auto___21688 + (1));\ni__4731__auto___21688 = G__21689;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn mranderson048.re_frame.v0v10v6.re_frame.subs.reg_sub.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nmranderson048.re_frame.v0v10v6.re_frame.subs.reg_sub.cljs$core$IFn$_invoke$arity$variadic = (function (query_id,args){\nvar computation_fn = cljs.core.last(args);\nvar input_args = cljs.core.butlast(args);\nvar err_header = [\"re-frame: reg-sub for \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(query_id),\", \"].join('');\nvar inputs_fn = (function (){var G__21581 = cljs.core.count(input_args);\nswitch (G__21581) {\ncase (0):\nreturn ((function (G__21581,computation_fn,input_args,err_header){\nreturn (function() {\nvar G__21691 = null;\nvar G__21691__1 = (function (_){\nreturn mranderson048.re_frame.v0v10v6.re_frame.db.app_db;\n});\nvar G__21691__2 = (function (_,___$1){\nreturn mranderson048.re_frame.v0v10v6.re_frame.db.app_db;\n});\nG__21691 = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn G__21691__1.call(this,_);\ncase 2:\nreturn G__21691__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nG__21691.cljs$core$IFn$_invoke$arity$1 = G__21691__1;\nG__21691.cljs$core$IFn$_invoke$arity$2 = G__21691__2;\nreturn G__21691;\n})()\n;})(G__21581,computation_fn,input_args,err_header))\n\nbreak;\ncase (1):\nvar f = cljs.core.first(input_args);\nif(cljs.core.fn_QMARK_(f)){\n} else {\nmranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"2nd argument expected to be an inputs function, got:\",f], 0));\n}\n\nreturn f;\n\nbreak;\ncase (2):\nvar vec__21584 = input_args;\nvar marker = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21584,(0),null);\nvar vec = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__21584,(1),null);\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"<-\",\"<-\",760412998),marker)){\n} else {\nmranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"expected :<-, got:\",marker], 0));\n}\n\nreturn ((function (vec__21584,marker,vec,G__21581,computation_fn,input_args,err_header){\nreturn (function() {\nvar mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn = null;\nvar mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn__1 = (function (_){\nreturn mranderson048.re_frame.v0v10v6.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(vec);\n});\nvar mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn__2 = (function (_,___$1){\nreturn mranderson048.re_frame.v0v10v6.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1(vec);\n});\nmranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn__1.call(this,_);\ncase 2:\nreturn mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nmranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$1 = mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn__1;\nmranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$2 = mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn__2;\nreturn mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn;\n})()\n;})(vec__21584,marker,vec,G__21581,computation_fn,input_args,err_header))\n\nbreak;\ndefault:\nvar pairs = cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),input_args);\nvar markers = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,pairs);\nvar vecs = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.last,pairs);\nif(((cljs.core.every_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"<-\",\"<-\",760412998),null], null), null),markers)) && (cljs.core.every_QMARK_(cljs.core.vector_QMARK_,vecs)))){\n} else {\nmranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic(new cljs.core.Keyword(null,\"error\",\"error\",-978969032),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([err_header,\"expected pairs of :<- and vectors, got:\",pairs], 0));\n}\n\nreturn ((function (pairs,markers,vecs,G__21581,computation_fn,input_args,err_header){\nreturn (function() {\nvar mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn = null;\nvar mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn__1 = (function (_){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(mranderson048.re_frame.v0v10v6.re_frame.subs.subscribe,vecs);\n});\nvar mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn__2 = (function (_,___$1){\nreturn cljs.core.map.cljs$core$IFn$_invoke$arity$2(mranderson048.re_frame.v0v10v6.re_frame.subs.subscribe,vecs);\n});\nmranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn = function(_,___$1){\nswitch(arguments.length){\ncase 1:\nreturn mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn__1.call(this,_);\ncase 2:\nreturn mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn__2.call(this,_,___$1);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nmranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$1 = mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn__1;\nmranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn.cljs$core$IFn$_invoke$arity$2 = mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn__2;\nreturn mranderson048$re_frame$v0v10v6$re_frame$subs$inp_fn;\n})()\n;})(pairs,markers,vecs,G__21581,computation_fn,input_args,err_header))\n\n}\n})();\nreturn mranderson048.re_frame.v0v10v6.re_frame.registrar.register_handler(mranderson048.re_frame.v0v10v6.re_frame.subs.kind,query_id,((function (computation_fn,input_args,err_header,inputs_fn){\nreturn (function() {\nvar mranderson048$re_frame$v0v10v6$re_frame$subs$subs_handler_fn = null;\nvar mranderson048$re_frame$v0v10v6$re_frame$subs$subs_handler_fn__2 = (function (db,query_vec){\nvar subscriptions = (inputs_fn.cljs$core$IFn$_invoke$arity$1 ? inputs_fn.cljs$core$IFn$_invoke$arity$1(query_vec) : inputs_fn.call(null,query_vec));\nvar reaction_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nvar reaction = mranderson048.re_frame.v0v10v6.re_frame.interop.make_reaction(((function (subscriptions,reaction_id,computation_fn,input_args,err_header,inputs_fn){\nreturn (function (){\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__21587 = mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__21588 = mranderson048.re_frame.v0v10v6.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),mranderson048.re_frame.v0v10v6.re_frame.utils.first_in_vector(query_vec),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"run\",\"sub/run\",-1821315581),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_vec,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),cljs.core.deref(reaction_id)], null)], null));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__21588;\n\ntry{try{var subscription = (function (){var G__21589 = mranderson048.re_frame.v0v10v6.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__21590 = query_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$2 ? computation_fn.cljs$core$IFn$_invoke$arity$2(G__21589,G__21590) : computation_fn.call(null,G__21589,G__21590));\n})();\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21701 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21701;\n\n} else {\n}\n\nreturn subscription;\n}finally {if(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__21429__auto___21703 = mranderson048.re_frame.v0v10v6.re_frame.interop.now();\nvar duration__21430__auto___21704 = (end__21429__auto___21703 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(mranderson048.re_frame.v0v10v6.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__21430__auto___21704,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),mranderson048.re_frame.v0v10v6.re_frame.interop.now()], 0)));\n\nmranderson048.re_frame.v0v10v6.re_frame.trace.run_tracing_callbacks_BANG_(end__21429__auto___21703);\n} else {\n}\n}}finally {mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__21587;\n}} else {\nvar subscription = (function (){var G__21595 = mranderson048.re_frame.v0v10v6.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__21596 = query_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$2 ? computation_fn.cljs$core$IFn$_invoke$arity$2(G__21595,G__21596) : computation_fn.call(null,G__21595,G__21596));\n})();\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21707 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21707;\n\n} else {\n}\n\nreturn subscription;\n}\n});})(subscriptions,reaction_id,computation_fn,input_args,err_header,inputs_fn))\n);\ncljs.core.reset_BANG_(reaction_id,mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id(reaction));\n\nreturn reaction;\n});\nvar mranderson048$re_frame$v0v10v6$re_frame$subs$subs_handler_fn__3 = (function (db,query_vec,dyn_vec){\nvar subscriptions = (inputs_fn.cljs$core$IFn$_invoke$arity$2 ? inputs_fn.cljs$core$IFn$_invoke$arity$2(query_vec,dyn_vec) : inputs_fn.call(null,query_vec,dyn_vec));\nvar reaction_id = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(null);\nvar reaction = mranderson048.re_frame.v0v10v6.re_frame.interop.make_reaction(((function (subscriptions,reaction_id,computation_fn,input_args,err_header,inputs_fn){\nreturn (function (){\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar _STAR_current_trace_STAR__orig_val__21602 = mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_;\nvar _STAR_current_trace_STAR__temp_val__21603 = mranderson048.re_frame.v0v10v6.re_frame.trace.start_trace(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"operation\",\"operation\",-1267664310),mranderson048.re_frame.v0v10v6.re_frame.utils.first_in_vector(query_vec),new cljs.core.Keyword(null,\"op-type\",\"op-type\",-1636141668),new cljs.core.Keyword(\"sub\",\"run\",\"sub/run\",-1821315581),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"query-v\",\"query-v\",-1514170131),query_vec,new cljs.core.Keyword(null,\"dyn-v\",\"dyn-v\",949994592),dyn_vec,new cljs.core.Keyword(null,\"reaction\",\"reaction\",490869788),cljs.core.deref(reaction_id)], null)], null));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__temp_val__21603;\n\ntry{try{var subscription = (function (){var G__21607 = mranderson048.re_frame.v0v10v6.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__21608 = query_vec;\nvar G__21609 = dyn_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$3 ? computation_fn.cljs$core$IFn$_invoke$arity$3(G__21607,G__21608,G__21609) : computation_fn.call(null,G__21607,G__21608,G__21609));\n})();\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21712 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21712;\n\n} else {\n}\n\nreturn subscription;\n}finally {if(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar end__21429__auto___21713 = mranderson048.re_frame.v0v10v6.re_frame.interop.now();\nvar duration__21430__auto___21714 = (end__21429__auto___21713 - new cljs.core.Keyword(null,\"start\",\"start\",-355208981).cljs$core$IFn$_invoke$arity$1(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_));\ncljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(mranderson048.re_frame.v0v10v6.re_frame.trace.traces,cljs.core.conj,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"duration\",\"duration\",1444101068),duration__21430__auto___21714,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"end\",\"end\",-268185958),mranderson048.re_frame.v0v10v6.re_frame.interop.now()], 0)));\n\nmranderson048.re_frame.v0v10v6.re_frame.trace.run_tracing_callbacks_BANG_(end__21429__auto___21713);\n} else {\n}\n}}finally {mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = _STAR_current_trace_STAR__orig_val__21602;\n}} else {\nvar subscription = (function (){var G__21610 = mranderson048.re_frame.v0v10v6.re_frame.subs.deref_input_signals(subscriptions,query_id);\nvar G__21611 = query_vec;\nvar G__21612 = dyn_vec;\nreturn (computation_fn.cljs$core$IFn$_invoke$arity$3 ? computation_fn.cljs$core$IFn$_invoke$arity$3(G__21610,G__21611,G__21612) : computation_fn.call(null,G__21610,G__21611,G__21612));\n})();\nif(mranderson048.re_frame.v0v10v6.re_frame.trace.is_trace_enabled_QMARK_()){\nvar new_trace__21431__auto___21719 = cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([cljs.core.update.cljs$core$IFn$_invoke$arity$4(mranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),cljs.core.merge,new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977).cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null))),cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977),new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"value\",\"value\",305978217),subscription], null)], null),new cljs.core.Keyword(null,\"tags\",\"tags\",1771418977))], 0));\nmranderson048.re_frame.v0v10v6.re_frame.trace._STAR_current_trace_STAR_ = new_trace__21431__auto___21719;\n\n} else {\n}\n\nreturn subscription;\n}\n});})(subscriptions,reaction_id,computation_fn,input_args,err_header,inputs_fn))\n);\ncljs.core.reset_BANG_(reaction_id,mranderson048.re_frame.v0v10v6.re_frame.interop.reagent_id(reaction));\n\nreturn reaction;\n});\nmranderson048$re_frame$v0v10v6$re_frame$subs$subs_handler_fn = function(db,query_vec,dyn_vec){\nswitch(arguments.length){\ncase 2:\nreturn mranderson048$re_frame$v0v10v6$re_frame$subs$subs_handler_fn__2.call(this,db,query_vec);\ncase 3:\nreturn mranderson048$re_frame$v0v10v6$re_frame$subs$subs_handler_fn__3.call(this,db,query_vec,dyn_vec);\n}\nthrow(new Error('Invalid arity: ' + arguments.length));\n};\nmranderson048$re_frame$v0v10v6$re_frame$subs$subs_handler_fn.cljs$core$IFn$_invoke$arity$2 = mranderson048$re_frame$v0v10v6$re_frame$subs$subs_handler_fn__2;\nmranderson048$re_frame$v0v10v6$re_frame$subs$subs_handler_fn.cljs$core$IFn$_invoke$arity$3 = mranderson048$re_frame$v0v10v6$re_frame$subs$subs_handler_fn__3;\nreturn mranderson048$re_frame$v0v10v6$re_frame$subs$subs_handler_fn;\n})()\n;})(computation_fn,input_args,err_header,inputs_fn))\n);\n});\n\nmranderson048.re_frame.v0v10v6.re_frame.subs.reg_sub.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nmranderson048.re_frame.v0v10v6.re_frame.subs.reg_sub.cljs$lang$applyTo = (function (seq21579){\nvar G__21580 = cljs.core.first(seq21579);\nvar seq21579__$1 = cljs.core.next(seq21579);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__21580,seq21579__$1);\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",49],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$mranderson048.re-frame.v0v10v6.re-frame.subs","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$mranderson048.re-frame.v0v10v6.re-frame.db","^K","~$mranderson048.re-frame.v0v10v6.re-frame.interop","^L","~$mranderson048.re-frame.v0v10v6.re-frame.loggers","^M","~$mranderson048.re-frame.v0v10v6.re-frame.utils","^N","~$mranderson048.re-frame.v0v10v6.re-frame.registrar","^O","~$mranderson048.re-frame.v0v10v6.re-frame.trace","^P","~$trace","^P","~$cljs.core","^R","~$goog","^S"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$reagent-id","^L","~$console","^M","~$app-db","^K","~$dispose!","^L","~$add-on-dispose!","^L","~$make-reaction","^L","~$get-handler","^O","~$first-in-vector","^N","~$deref?","^L","~$ratom?","^L","~$debug-enabled?","^L","~$clear-handlers","^O","~$register-handler","^O"],"~:require-macros",["^ ","^P","^P","^Q","^P","^R","^R"],"~:form",["~#list",["~$ns","^F",["^1:",["^U",["^K","~:refer",["^Y"]],["^L","^1<",["^[","^15","^10","^14","^13","^Z","^W"]],["^M","^1<",["^X"]],["^N","^1<",["^12"]],["^O","^1<",["^11","^16","^17"]],["^P","~:as","^Q","~:include-macros",true]]]]],"~:flags",["^ ","^U",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^K","^L","^M","^N","^O","^P"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc"],"~:compiled-at",1551976189615,"~:resource-name","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","~:warnings",[],"~:source","(ns mranderson048.re-frame.v0v10v6.re-frame.subs\n (:require\n   [mranderson048.re-frame.v0v10v6.re-frame.db        :refer [app-db]]\n   [mranderson048.re-frame.v0v10v6.re-frame.interop   :refer [add-on-dispose! debug-enabled? make-reaction ratom? deref? dispose! reagent-id]]\n   [mranderson048.re-frame.v0v10v6.re-frame.loggers   :refer [console]]\n   [mranderson048.re-frame.v0v10v6.re-frame.utils     :refer [first-in-vector]]\n   [mranderson048.re-frame.v0v10v6.re-frame.registrar :refer [get-handler clear-handlers register-handler]]\n   [mranderson048.re-frame.v0v10v6.re-frame.trace     :as trace :include-macros true]))\n\n(def kind :sub)\n(assert (mranderson048.re-frame.v0v10v6.re-frame.registrar/kinds kind))\n\n;; -- cache -------------------------------------------------------------------\n;;\n;; De-duplicate subscriptions. If two or more equal subscriptions\n;; are concurrently active, we want only one handler running.\n;; Two subscriptions are \"equal\" if their query vectors test \"=\".\n(def query->reaction (atom {}))\n\n(defn clear-subscription-cache!\n  \"Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running on-dispose on all cached subscriptions\n     2. These on-dispose will then do the removal of themselves.\n\n  This is a development time tool. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue.\"\n  []\n  (doseq [[k rxn] @query->reaction]\n    (dispose! rxn))\n  (if (not-empty @query->reaction)\n    (console :warn \"Subscription cache should be empty after clearing it.\")))\n\n(defn clear-all-handlers!\n  \"Unregisters all existing subscription handlers\"\n  []\n  (clear-handlers kind)\n  (clear-subscription-cache!))\n\n(defn cache-and-return\n  \"cache the reaction r\"\n  [query-v dynv r]\n  (let [cache-key [query-v dynv]]\n    ;; when this reaction is no longer being used, remove it from the cache\n    (add-on-dispose! r #(trace/with-trace {:operation (first-in-vector query-v)\n                                           :op-type   :sub/dispose\n                                           :tags      {:query-v  query-v\n                                                       :reaction (reagent-id r)}}\n                                          (swap! query->reaction\n                                                 (fn [query-cache]\n                                                   (if (and (contains? query-cache cache-key) (identical? r (get query-cache cache-key)))\n                                                     (dissoc query-cache cache-key)\n                                                     query-cache)))))\n    ;; cache this reaction, so it can be used to deduplicate other, later \"=\" subscriptions\n    (swap! query->reaction (fn [query-cache]\n                             (when debug-enabled?\n                               (when (contains? query-cache cache-key)\n                                 (console :warn \"re-frame: Adding a new subscription to the cache while there is an existing subscription in the cache\" cache-key)))\n                             (assoc query-cache cache-key r)))\n    (trace/merge-trace! {:tags {:reaction (reagent-id r)}})\n    r)) ;; return the actual reaction\n\n(defn cache-lookup\n  ([query-v]\n   (cache-lookup query-v []))\n  ([query-v dyn-v]\n   (get @query->reaction [query-v dyn-v])))\n\n\n;; -- subscribe ---------------------------------------------------------------\n\n(defn subscribe\n  \"Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a Signal.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, `which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \\\"blue\\\" :small])\n    (subscribe [:items {:colour \\\"blue\\\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref mranderson048.re-frame.v0v10v6.re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  \"\n\n  ([query]\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query}}\n     (if-let [cached (cache-lookup query)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (cache-and-return query [] (handler-fn app-db query)))))))\n\n  ([query dynv]\n   (trace/with-trace {:operation (first-in-vector query)\n                      :op-type   :sub/create\n                      :tags      {:query-v query\n                                  :dyn-v   dynv}}\n     (if-let [cached (cache-lookup query dynv)]\n       (do\n         (trace/merge-trace! {:tags {:cached?  true\n                                     :reaction (reagent-id cached)}})\n         cached)\n       (let [query-id   (first-in-vector query)\n             handler-fn (get-handler kind query-id)]\n         (trace/merge-trace! {:tags {:cached? false}})\n         (when debug-enabled?\n           (when-let [not-reactive (not-empty (remove ratom? dynv))]\n             (console :warn \"re-frame: your subscription's dynamic parameters that don't implement IReactiveAtom:\" not-reactive)))\n         (if (nil? handler-fn)\n           (do (trace/merge-trace! {:error true})\n               (console :error (str \"re-frame: no subscription handler registered for: \" query-id \". Returning a nil subscription.\")))\n           (let [dyn-vals (make-reaction (fn [] (mapv deref dynv)))\n                 sub      (make-reaction (fn [] (handler-fn app-db query @dyn-vals)))]\n             ;; handler-fn returns a reaction which is then wrapped in the sub reaction\n             ;; need to double deref it to get to the actual value.\n             ;(console :log \"Subscription created: \" v dynv)\n             (cache-and-return query dynv (make-reaction (fn [] @@sub))))))))))\n\n;; -- reg-sub -----------------------------------------------------------------\n\n(defn- map-vals\n  \"Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}\"\n  [f m]\n  (into (empty m)\n        (map (fn [[k v]] [k (f v)]))\n        m))\n\n(defn map-signals\n  \"Runs f over signals. Signals may take several\n  forms, this function handles all of them.\"\n  [f signals]\n  (cond\n    (sequential? signals) (map f signals)\n    (map? signals) (map-vals f signals)\n    (deref? signals) (f signals)\n    :else '()))\n\n(defn to-seq\n  \"Coerces x to a seq if it isn't one already\"\n  [x]\n  (if (sequential? x)\n    x\n    (list x)))\n\n(defn- deref-input-signals\n  [signals query-id]\n  (let [dereffed-signals (map-signals deref signals)]\n    (cond\n      (sequential? signals) (map deref signals)\n      (map? signals) (map-vals deref signals)\n      (deref? signals) (deref signals)\n      :else (console :error \"re-frame: in the reg-sub for\" query-id \", the input-signals function returns:\" signals))\n    (trace/merge-trace! {:tags {:input-signals (doall (to-seq (map-signals reagent-id signals)))}})\n    dereffed-signals))\n\n\n(defn reg-sub\n  \"For a given `query-id`, register a `computation` function and input `signals`.\n\n  At an abstract level, a call to this function allows you to register 'the mechanism'\n  to later fulfil a call to `(subscribe [query-id ...])`.\n\n  To say that another way, reg-sub allows you to create a template for a node\n  in the signal graph. But note: reg-sub does not cause a node to be created.\n  It simply allows you to register the template from which such a\n  node could be created, if it were needed, sometime later, when the call\n  to `subscribe` is made.\n\n  reg-sub needs three things:\n    - a `query-id`\n    - the required inputs for this node\n    - a computation function for this node\n\n  The `query-id` is always the 1st argument to reg-sub and it is typically\n  a namespaced keyword.\n\n  A computation function is always the last argument and it has this general form:\n    `(input-signals, query-vector) -> a-value`\n\n  What goes in between the 1st and last args can vary, but whatever is there will\n  define the input signals part of the template, and, as a result, it will control\n  what values the computation functions gets as a first argument.\n\n  There's 3 ways this function can be called - 3 ways to supply input signals:\n\n  1. No input signals given:\n\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; (fn [db v]  ... a-value)\n\n     The node's input signal defaults to `app-db`, and the value within `app-db` is\n     is given as the 1st argument to the computation function.\n\n  2. A signal function is supplied:\n\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n\n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from the nominated signals will be supplied as the 1st argument to the\n     computation function - either a singleton, sequence or map of them, paralleling\n     the structure returned by the signal function.\n\n     Here, is an example signal-fn, which returns a vector of input signals.\n\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n\n     For that signal function, the computation function must be written\n     to expect a vector of values for its first argument.\n       (fn [[a b] _] ....)\n\n     If the signal function was simpler and returned a singleton, like this:\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n\n     then the computation function must be written to expect a single value\n     as the 1st argument:\n\n        (fn [a _] ...)\n\n  3. Syntax Sugar\n\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] [_]] {:a a :b b}))\n\n  This 3rd variation is syntactic sugar for the 2nd. Pairs are supplied instead\n  of an `input signals` functions. Each pair starts with a `:<-` and a subscription\n  vector follows.\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  \"\n  [query-id & args]\n  (let [computation-fn (last args)\n        input-args     (butlast args) ;; may be empty, or one signal fn, or pairs of  :<- / vector\n        err-header     (str \"re-frame: reg-sub for \" query-id \", \")\n        inputs-fn      (case (count input-args)\n                         ;; no `inputs` function provided - give the default\n                         0 (fn\n                             ([_] app-db)\n                             ([_ _] app-db))\n\n                         ;; a single `inputs` fn\n                         1 (let [f (first input-args)]\n                             (when-not (fn? f)\n                               (console :error err-header \"2nd argument expected to be an inputs function, got:\" f))\n                             f)\n\n                         ;; one sugar pair\n                         2 (let [[marker vec] input-args]\n                             (when-not (= :<- marker)\n                               (console :error err-header \"expected :<-, got:\" marker))\n                             (fn inp-fn\n                               ([_] (subscribe vec))\n                               ([_ _] (subscribe vec))))\n\n                         ;; multiple sugar pairs\n                         (let [pairs   (partition 2 input-args)\n                               markers (map first pairs)\n                               vecs    (map last pairs)]\n                           (when-not (and (every? #{:<-} markers) (every? vector? vecs))\n                             (console :error err-header \"expected pairs of :<- and vectors, got:\" pairs))\n                           (fn inp-fn\n                             ([_] (map subscribe vecs))\n                             ([_ _] (map subscribe vecs)))))]\n    (register-handler\n      kind\n      query-id\n      (fn subs-handler-fn\n        ([db query-vec]\n         (let [subscriptions (inputs-fn query-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v    query-vec\n                                                                :reaction   @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))\n        ([db query-vec dyn-vec]\n         (let [subscriptions (inputs-fn query-vec dyn-vec)\n               reaction-id   (atom nil)\n               reaction      (make-reaction\n                               (fn []\n                                 (trace/with-trace {:operation (first-in-vector query-vec)\n                                                    :op-type   :sub/run\n                                                    :tags      {:query-v   query-vec\n                                                                :dyn-v     dyn-vec\n                                                                :reaction  @reaction-id}}\n                                                   (let [subscription (computation-fn (deref-input-signals subscriptions query-id) query-vec dyn-vec)]\n                                                     (trace/merge-trace! {:tags {:value subscription}})\n                                                     subscription))))]\n\n           (reset! reaction-id (reagent-id reaction))\n           reaction))))))\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings","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","names",["mranderson048.re-frame.v0v10v6.re-frame.subs/kind","js/Error","mranderson048.re-frame.v0v10v6.re-frame.registrar/kinds","mranderson048.re-frame.v0v10v6.re-frame.subs/query->reaction","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","mranderson048.re-frame.v0v10v6.re-frame.subs/clear-subscription-cache!","seq__21508","cljs.core/seq","cljs.core/deref","chunk__21509","count__21510","i__21511","vec__21522","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","temp__5457__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__21525","cljs.core/first","cljs.core/next","k","rxn","mranderson048.re-frame.v0v10v6.re-frame.interop/dispose!","cljs.core/not-empty","mranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic","mranderson048.re-frame.v0v10v6.re-frame.subs/clear-all-handlers!","mranderson048.re_frame.v0v10v6.re_frame.registrar.clear_handlers.cljs$core$IFn$_invoke$arity$1","mranderson048.re-frame.v0v10v6.re-frame.subs/cache-and-return","query-v","dynv","r","cache-key","mranderson048.re-frame.v0v10v6.re-frame.interop/add-on-dispose!","mranderson048.re-frame.v0v10v6.re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__21530","mranderson048.re-frame.v0v10v6.re-frame.trace/*current-trace*","*current-trace*-temp-val__21531","mranderson048.re-frame.v0v10v6.re-frame.trace/start-trace","end__21429__auto__","mranderson048.re-frame.v0v10v6.re-frame.interop/now","duration__21430__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","mranderson048.re-frame.v0v10v6.re-frame.trace/traces","cljs.core/conj","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","mranderson048.re-frame.v0v10v6.re-frame.trace/run-tracing-callbacks!","mranderson048.re-frame.v0v10v6.re-frame.utils/first-in-vector","mranderson048.re-frame.v0v10v6.re-frame.interop/reagent-id","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","query-cache","cljs.core/contains?","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","mranderson048.re-frame.v0v10v6.re-frame.interop/debug-enabled?","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","new-trace__21431__auto__","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/merge","var_args","G__21539","mranderson048.re-frame.v0v10v6.re-frame.subs/cache-lookup","mranderson048.re_frame.v0v10v6.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$2","dyn-v","G__21541","mranderson048.re-frame.v0v10v6.re-frame.subs/subscribe","query","*current-trace*-orig-val__21542","*current-trace*-temp-val__21543","temp__5455__auto__","cached","mranderson048.re_frame.v0v10v6.re_frame.subs.cache_lookup.cljs$core$IFn$_invoke$arity$1","query-id","handler-fn","mranderson048.re_frame.v0v10v6.re_frame.registrar.get_handler.cljs$core$IFn$_invoke$arity$2","mranderson048.re-frame.v0v10v6.re-frame.db/app-db","*current-trace*-orig-val__21546","*current-trace*-temp-val__21547","not-reactive","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","mranderson048.re-frame.v0v10v6.re-frame.interop/ratom?","dyn-vals","mranderson048.re-frame.v0v10v6.re-frame.interop/make-reaction","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","sub","G__21551","G__21552","G__21553","G__21558","G__21559","G__21560","mranderson048.re-frame.v0v10v6.re-frame.subs/map-vals","f","m","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core/empty","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__21564","vec__21565","v","mranderson048.re-frame.v0v10v6.re-frame.subs/map-signals","signals","cljs.core/sequential?","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/map?","mranderson048.re-frame.v0v10v6.re-frame.interop/deref?","mranderson048.re-frame.v0v10v6.re-frame.subs/to-seq","x","cljs.core/List","mranderson048.re-frame.v0v10v6.re-frame.subs/deref-input-signals","dereffed-signals","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","mranderson048.re-frame.v0v10v6.re-frame.subs/reg-sub","seq21579","G__21580","self__4717__auto__","args","computation-fn","cljs.core/last","input-args","cljs.core/butlast","err-header","inputs-fn","G__21581","_","cljs.core/fn?","vec__21584","marker","vec","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","mranderson048.re_frame.v0v10v6.re_frame.subs.subscribe.cljs$core$IFn$_invoke$arity$1","pairs","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","markers","vecs","cljs.core/every?","cljs.core/vector?","mranderson048.re-frame.v0v10v6.re-frame.registrar/register-handler","db","query-vec","subscriptions","reaction-id","reaction","*current-trace*-orig-val__21587","*current-trace*-temp-val__21588","subscription","G__21589","G__21590","G__21595","G__21596","cljs.core/reset!","dyn-vec","*current-trace*-orig-val__21602","*current-trace*-temp-val__21603","G__21607","G__21608","G__21609","G__21610","G__21611","G__21612"]]],"~:cache-keys",["~#cmap",[["~:shadow.build.npm/resource","node_modules/react-dom/index.js"],[1549286327000,1551975898000,"~$shadow.js","~$module$node_modules$react_dom$cjs$react_dom_production_min","~$module$node_modules$react_dom$cjs$react_dom_development"],["^1C","goog/dom/tagname.js"],[1538195417000,"^S","~$goog.dom.HtmlElement"],["~:macro","^R"],[1549013760000],["^1U","~$mranderson048.reagent.v0v8v0.reagent.core"],[1544640735000],["^1C","goog/math/math.js"],[1538195417000,"^S","~$goog.array","~$goog.asserts"],["^1C","goog/labs/useragent/browser.js"],[1538195417000,"^S","^1W","~$goog.labs.userAgent.util","~$goog.object","~$goog.string"],["^1C","mranderson048/reagent/v0v8v0/reagent/core.cljs"],[1544640735000,"^S","^R","^=","~$mranderson048.reagent.v0v8v0.reagent.impl.template","~$mranderson048.reagent.v0v8v0.reagent.impl.component","~$mranderson048.reagent.v0v8v0.reagent.impl.util","~$mranderson048.reagent.v0v8v0.reagent.impl.batching","~$mranderson048.reagent.v0v8v0.reagent.ratom","~$mranderson048.reagent.v0v8v0.reagent.debug","~$mranderson048.reagent.v0v8v0.reagent.interop","~$mranderson048.reagent.v0v8v0.reagent.dom"],["^1C","goog/array/array.js"],[1538195417000,"^S","^1X"],["^1P","node_modules/prop-types/checkPropTypes.js"],[1549286327000,1551975898000,"^1Q","~$module$node_modules$prop_types$lib$ReactPropTypesSecret"],["^1C","mranderson048/re_frame/v0v10v6/re_frame/utils.cljc"],[1544640735000,"^S","^R","^M"],["^1C","mranderson048/re_frame/v0v10v6/re_frame/loggers.cljc"],[1544640735000,"^S","^R","~$clojure.set"],["^1C","mranderson048/re_frame/v0v10v6/re_frame/trace.cljc"],[1544640735000,"^S","^R","^L","^M","~$goog.functions"],["^1U","~$net.cgrand.macrovich"],[1538195422000],["^1P","node_modules/fbjs/lib/emptyFunction.js"],[1549286327000,1551975896000,"^1Q"],["^1C","goog/debug/error.js"],[1538195417000,"^S"],["^1C","mranderson048/reagent/v0v8v0/reagent/dom.cljs"],[1544640735000,"^S","^R","^A","^22","^20","^23","^24","^25","^26"],["^1C","mranderson048/reagent/v0v8v0/reagent/impl/component.cljs"],[1544640735000,"^S","^R","^?","^=","^22","^23","^24","^26","^25"],["^1P","node_modules/fbjs/lib/emptyObject.js"],[1549286327000,1551975896000,"^1Q"],["^1C","goog/dom/nodetype.js"],[1538195417000,"^S"],["^1C","mranderson048/re_frame/v0v10v6/re_frame/interop.cljs"],[1544640735000,"^S","^R","~$goog.async.nextTick","^1V","^24"],["^1C","mranderson048/re_frame/v0v10v6/re_frame/db.cljc"],[1544640735000,"^S","^R","^L"],["^1P","node_modules/scheduler/cjs/scheduler.development.js"],[1549286327000,1551975898000,"^1Q"],["^1P","node_modules/scheduler/cjs/scheduler.production.min.js"],[1549286327000,1551975898000,"^1Q"],["^1U","^P"],[1544640735000],["^1P","node_modules/scheduler/cjs/scheduler-tracing.production.min.js"],[1549286327000,1551975898000,"^1Q"],["^1P","node_modules/create-react-class/factory.js"],[1549286327000,1551975896000,"^1Q","~$module$node_modules$object_assign$index","~$module$node_modules$fbjs$lib$emptyObject","~$module$node_modules$fbjs$lib$invariant","~$module$node_modules$fbjs$lib$warning"],["^1P","node_modules/react/index.js"],[1549286327000,1551975898000,"^1Q","~$module$node_modules$react$cjs$react_production_min","~$module$node_modules$react$cjs$react_development"],["^1C","shadow/js.js"],[1549286327000,"^S"],["^1C","goog/object/object.js"],[1538195417000,"^S"],["^1C","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc"],[1544640735000,"^S","^R","^K","^L","^M","^N","^O","^P"],["^1P","node_modules/react-dom/cjs/react-dom.production.min.js"],[1549286327000,1551975898000,"^1Q","^=","^2=","~$module$node_modules$scheduler$index"],"~:SHADOW-TIMESTAMP",[1549286327000,1549013760000],["^1P","node_modules/react/cjs/react.development.js"],[1549286327000,1551975898000,"^1Q","^2=","~$module$node_modules$prop_types$checkPropTypes"],["^1U","^26"],[1544640735000],["^1C","goog/math/long.js"],[1538195417000,"^S","^1X","~$goog.reflect"],["^1C","mranderson048/reagent/v0v8v0/reagent/impl/batching.cljs"],[1544640735000,"^S","^R","^25","^26","^22","~$clojure.string"],["^1P","node_modules/scheduler/cjs/scheduler-tracing.development.js"],[1549286327000,1551975898000,"^1Q"],["^1P","node_modules/fbjs/lib/warning.js"],[1549286327000,1551975897000,"^1Q","~$module$node_modules$fbjs$lib$emptyFunction"],["^1C","goog/functions/functions.js"],[1538195417000,"^S"],["^1C","clojure/walk.cljs"],[1549013760000,"^S","^R"],["^1C","goog/structs/map.js"],[1538195417000,"^S","~$goog.iter.Iterator","~$goog.iter.StopIteration","^1Z"],["^1P","node_modules/scheduler/index.js"],[1549286327000,1551975898000,"^1Q","~$module$node_modules$scheduler$cjs$scheduler_production_min","~$module$node_modules$scheduler$cjs$scheduler_development"],["^1C","goog/labs/useragent/engine.js"],[1538195417000,"^S","^1W","^1Y","^1["],["^1U","^24"],[1544640735000],["^1C","goog/asserts/asserts.js"],[1538195417000,"^S","~$goog.debug.Error","~$goog.dom.NodeType","^1["],["^1C","goog/uri/uri.js"],[1538195417000,"^S","^1W","^1X","^1[","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^1C","mranderson048/reagent/v0v8v0/reagent/ratom.cljs"],[1544640735000,"^S","^R","^22","^25","^23","^29"],["^1C","mranderson048/reagent/v0v8v0/reagent/interop.cljs"],[1544640735000,"^S","^R"],["^1P","node_modules/object-assign/index.js"],[1549286327000,1551975897000,"^1Q"],["^1C","goog/base.js"],[1538195417000],["^1C","goog/structs/structs.js"],[1538195417000,"^S","^1W","^1Z"],["^1C","clojure/string.cljs"],[1549013760000,"^S","^R","^1[","~$goog.string.StringBuffer"],["^1P","node_modules/create-react-class/index.js"],[1549286327000,1551975896000,"^1Q","^=","~$module$node_modules$create_react_class$factory"],["^1P","node_modules/react/cjs/react.production.min.js"],[1549286327000,1551975898000,"^1Q","^2="],["^1C","goog/debug/entrypointregistry.js"],[1538195417000,"^S","^1X"],["^1C","goog/string/string.js"],[1538195417000,"^S"],["^1C","mranderson048/reagent/v0v8v0/reagent/impl/template.cljs"],[1544640735000,"^S","^R","^=","^2G","~$clojure.walk","^22","^21","^23","^24","^26","^25"],["^1C","mranderson048/reagent/v0v8v0/reagent/impl/util.cljs"],[1544640735000,"^S","^R","^25","^26","^2G"],["^1C","goog/reflect/reflect.js"],[1538195417000,"^S"],["^1C","goog/labs/useragent/util.js"],[1538195417000,"^S","^1["],["^1C","goog/string/stringbuffer.js"],[1538195417000,"^S"],["^1C","goog/iter/iter.js"],[1538195417000,"^S","^1W","^1X","^2:","~$goog.math"],["^1C","goog/async/nexttick.js"],[1538195417000,"^S","~$goog.debug.entryPointRegistry","~$goog.dom.TagName","^2:","~$goog.labs.userAgent.browser","~$goog.labs.userAgent.engine"],["^1C","mranderson048/re_frame/v0v10v6/re_frame/registrar.cljc"],[1544640735000,"^S","^R","^L","^M"],["^1P","node_modules/prop-types/lib/ReactPropTypesSecret.js"],[1549286327000,1551975898000,"^1Q"],["^1C","goog/dom/htmlelement.js"],[1538195417000,"^S"],["^1C","cljs/core.cljs"],[1549013760000,"~$goog.math.Long","~$goog.math.Integer","^1[","^1Z","^1W","~$goog.Uri","^2T"],["^1C","goog/math/integer.js"],[1538195417000,"^S"],["^1P","node_modules/scheduler/tracing.js"],[1549286327000,1551975898000,"^1Q","~$module$node_modules$scheduler$cjs$scheduler_tracing_production_min","~$module$node_modules$scheduler$cjs$scheduler_tracing_development"],["^1C","mranderson048/reagent/v0v8v0/reagent/debug.cljs"],[1544640735000,"^S","^R"],["^1P","node_modules/react-dom/cjs/react-dom.development.js"],[1549286327000,1551975898000,"^1Q","^=","^2=","^2E","^2C","~$module$node_modules$scheduler$tracing"],["^1C","clojure/set.cljs"],[1549013760000,"^S","^R"],["^1C","goog/uri/utils.js"],[1538195417000,"^S","^1W","^1X","^1["],["^1P","node_modules/fbjs/lib/invariant.js"],[1549286327000,1551975896000,"^1Q"],["^1U","^25"],[1544640735000]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",1,"^8",5,"^9",1,"^:",49],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L","^M","^M","^N","^N","^O","^O","^P","^P","^Q","^P","^R","^R","^S","^S"],"^T",["^D",["^U"]],"~:shadow/js-access-global",["^D",["Error"]],"^V",["^ ","^W","^L","^X","^M","^Y","^K","^Z","^L","^[","^L","^10","^L","^11","^O","^12","^N","^13","^L","^14","^L","^15","^L","^16","^O","^17","^O"],"~:defs",["^ ","~$to-seq",["^ ","~:protocol-inline",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",181,"^8",7,"^9",181,"^:",13,"~:arglists",["^1:",["~$quote",["^1:",[["~$x"]]]]],"~:doc","Coerces x to a seq if it isn't one already"],"^E","~$mranderson048.re-frame.v0v10v6.re-frame.subs/to-seq","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^:",13,"~:method-params",["^1:",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^1:",[null,null]],"^8",1,"~:variadic?",false,"^7",181,"~:ret-tag","~$clj","^9",181,"~:max-fixed-arity",1,"~:fn-var",true,"^3;",["^1:",["^3<",["^1:",[["~$x"]]]]],"^3=","Coerces x to a seq if it isn't one already"],"~$cache-and-return",["^ ","^3:",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",42,"^8",7,"^9",42,"^:",23,"^3;",["^1:",["^3<",["^1:",[["~$query-v","~$dynv","~$r"]]]]],"^3=","cache the reaction r"],"^E","~$mranderson048.re-frame.v0v10v6.re-frame.subs/cache-and-return","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^:",23,"^3?",["^1:",[["^3H","^3I","~$r"]]],"^3@",null,"^3A",["^1:",[null,null]],"^8",1,"^3B",false,"^7",42,"^9",42,"^3E",3,"^3F",true,"^3;",["^1:",["^3<",["^1:",[["^3H","^3I","~$r"]]]]],"^3=","cache the reaction r"],"~$deref-input-signals",["^ ","^3:",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",188,"^8",8,"^9",188,"^:",27,"~:private",true,"^3;",["^1:",["^3<",["^1:",[["~$signals","~$query-id"]]]]]],"^3L",true,"^E","~$mranderson048.re-frame.v0v10v6.re-frame.subs/deref-input-signals","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^:",27,"^3?",["^1:",[["^3M","^3N"]]],"^3@",null,"^3A",["^1:",[null,null]],"^8",1,"^3B",false,"^7",188,"^3C",["^D",["^3D","~$cljs.core/IList","~$any","~$cljs.core/LazySeq"]],"^9",188,"^3E",2,"^3F",true,"^3;",["^1:",["^3<",["^1:",[["^3M","^3N"]]]]]],"~$subscribe",["^ ","^3:",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",74,"^8",7,"^9",74,"^:",16,"^3;",["^1:",["^3<",["^1:",[["~$query"],["^3T","^3I"]]]]],"^3=","Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a Signal.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, `which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref mranderson048.re-frame.v0v10v6.re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  ","~:top-fn",["^ ","^3B",false,"~:fixed-arity",2,"^3E",2,"^3?",["^1:",[["^3T"],["^3T","^3I"]]],"^3;",["^1:",[["^3T"],["^3T","^3I"]]],"^3A",["^1:",[null,null]]]],"^E","~$mranderson048.re-frame.v0v10v6.re-frame.subs/subscribe","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^:",16,"^3U",["^ ","^3B",false,"^3V",2,"^3E",2,"^3?",["^1:",[["^3T"],["^3T","^3I"]]],"^3;",["^1:",[["^3T"],["^3T","^3I"]]],"^3A",["^1:",[null,null]]],"^3?",["^1:",[["^3T"],["^3T","^3I"]]],"^3@",null,"^3V",2,"^3A",["^1:",[null,null]],"^8",1,"^3B",false,"~:methods",[["^ ","^3V",1,"^3B",false,"~:tag",["^D",[null,"^3Q"]]],["^ ","^3V",2,"^3B",false,"^3Y",["^D",[null,"^3Q"]]]],"^7",74,"^9",74,"^3E",2,"^3F",true,"^3;",["^1:",[["^3T"],["^3T","^3I"]]],"^3=","Given a `query`, returns a Reagent `reaction` which, over\n  time, reactively delivers a stream of values. So in FRP-ish terms,\n  it returns a Signal.\n\n  To obtain the returned Signal/Stream's current value, it must be `deref`ed.\n\n  `query` is a vector of at least one element. The first element is the\n  `query-id`, typically a namespaced keyword. The rest of the vector's\n  elements are optional, additional values which parameterise the query\n  performed.\n\n  `dynv` is an optional 3rd argument, `which is a vector of further input\n  signals (atoms, reactions, etc), NOT values. This argument exists for\n  historical reasons and is borderline deprecated these days.\n\n  Example Usage:\n  --------------\n\n    (subscribe [:items])\n    (subscribe [:items \"blue\" :small])\n    (subscribe [:items {:colour \"blue\"  :size :small}])\n\n  Note: for any given call to `subscribe` there must have been a previous call\n  to `reg-sub`, registering the query handler (function) for the `query-id` given.\n\n  Hint\n  ----\n\n  When used in a view function BE SURE to `deref` the returned value.\n  In fact, to avoid any mistakes, some prefer to define:\n\n     (def <sub  (comp deref mranderson048.re-frame.v0v10v6.re-frame.core/subscribe))\n\n  And then, within their views, they call  `(<sub [:items :small])` rather\n  than using `subscribe` directly.\n\n  De-duplication\n  --------------\n\n  XXX\n  "],"~$reg-sub",["^ ","^3:",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",200,"^8",7,"^9",200,"^:",14,"^3;",["^1:",["^3<",["^1:",[["^3N","~$&","~$args"]]]]],"^3=","For a given `query-id`, register a `computation` function and input `signals`.\n\n  At an abstract level, a call to this function allows you to register 'the mechanism'\n  to later fulfil a call to `(subscribe [query-id ...])`.\n\n  To say that another way, reg-sub allows you to create a template for a node\n  in the signal graph. But note: reg-sub does not cause a node to be created.\n  It simply allows you to register the template from which such a\n  node could be created, if it were needed, sometime later, when the call\n  to `subscribe` is made.\n\n  reg-sub needs three things:\n    - a `query-id`\n    - the required inputs for this node\n    - a computation function for this node\n\n  The `query-id` is always the 1st argument to reg-sub and it is typically\n  a namespaced keyword.\n\n  A computation function is always the last argument and it has this general form:\n    `(input-signals, query-vector) -> a-value`\n\n  What goes in between the 1st and last args can vary, but whatever is there will\n  define the input signals part of the template, and, as a result, it will control\n  what values the computation functions gets as a first argument.\n\n  There's 3 ways this function can be called - 3 ways to supply input signals:\n\n  1. No input signals given:\n\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; (fn [db v]  ... a-value)\n\n     The node's input signal defaults to `app-db`, and the value within `app-db` is\n     is given as the 1st argument to the computation function.\n\n  2. A signal function is supplied:\n\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n\n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from the nominated signals will be supplied as the 1st argument to the\n     computation function - either a singleton, sequence or map of them, paralleling\n     the structure returned by the signal function.\n\n     Here, is an example signal-fn, which returns a vector of input signals.\n\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n\n     For that signal function, the computation function must be written\n     to expect a vector of values for its first argument.\n       (fn [[a b] _] ....)\n\n     If the signal function was simpler and returned a singleton, like this:\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n\n     then the computation function must be written to expect a single value\n     as the 1st argument:\n\n        (fn [a _] ...)\n\n  3. Syntax Sugar\n\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] [_]] {:a a :b b}))\n\n  This 3rd variation is syntactic sugar for the 2nd. Pairs are supplied instead\n  of an `input signals` functions. Each pair starts with a `:<-` and a subscription\n  vector follows.\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  ","^3U",["^ ","^3B",true,"^3V",1,"^3E",1,"^3?",[["^1:",["^3N","^3["]]],"^3;",["^1:",[["^3N","~$&","^3["]]],"^3A",["^1:",[null]]]],"^E","~$mranderson048.re-frame.v0v10v6.re-frame.subs/reg-sub","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^:",14,"^3U",["^ ","^3B",true,"^3V",1,"^3E",1,"^3?",[["^1:",["^3N","^3["]]],"^3;",["^1:",[["^3N","~$&","^3["]]],"^3A",["^1:",[null]]],"^3?",[["^1:",["^3N","^3["]]],"^3@",null,"^3V",1,"^3A",["^1:",[null]],"^8",1,"^3B",true,"^3X",[["^ ","^3V",1,"^3B",true,"^3Y","^3Q"]],"^7",200,"^3C","^3Q","^9",200,"^3E",1,"^3F",true,"^3;",["^1:",[["^3N","~$&","^3["]]],"^3=","For a given `query-id`, register a `computation` function and input `signals`.\n\n  At an abstract level, a call to this function allows you to register 'the mechanism'\n  to later fulfil a call to `(subscribe [query-id ...])`.\n\n  To say that another way, reg-sub allows you to create a template for a node\n  in the signal graph. But note: reg-sub does not cause a node to be created.\n  It simply allows you to register the template from which such a\n  node could be created, if it were needed, sometime later, when the call\n  to `subscribe` is made.\n\n  reg-sub needs three things:\n    - a `query-id`\n    - the required inputs for this node\n    - a computation function for this node\n\n  The `query-id` is always the 1st argument to reg-sub and it is typically\n  a namespaced keyword.\n\n  A computation function is always the last argument and it has this general form:\n    `(input-signals, query-vector) -> a-value`\n\n  What goes in between the 1st and last args can vary, but whatever is there will\n  define the input signals part of the template, and, as a result, it will control\n  what values the computation functions gets as a first argument.\n\n  There's 3 ways this function can be called - 3 ways to supply input signals:\n\n  1. No input signals given:\n\n     (reg-sub\n       :query-id\n       a-computation-fn)   ;; (fn [db v]  ... a-value)\n\n     The node's input signal defaults to `app-db`, and the value within `app-db` is\n     is given as the 1st argument to the computation function.\n\n  2. A signal function is supplied:\n\n     (reg-sub\n       :query-id\n       signal-fn     ;; <-- here\n       computation-fn)\n\n     When a node is created from the template, the `signal-fn` will be called and it\n     is expected to return the input signal(s) as either a singleton, if there is only\n     one, or a sequence if there are many, or a map with the signals as the values.\n\n     The values from the nominated signals will be supplied as the 1st argument to the\n     computation function - either a singleton, sequence or map of them, paralleling\n     the structure returned by the signal function.\n\n     Here, is an example signal-fn, which returns a vector of input signals.\n\n       (fn [query-vec dynamic-vec]\n         [(subscribe [:a-sub])\n          (subscribe [:b-sub])])\n\n     For that signal function, the computation function must be written\n     to expect a vector of values for its first argument.\n       (fn [[a b] _] ....)\n\n     If the signal function was simpler and returned a singleton, like this:\n        (fn [query-vec dynamic-vec]\n          (subscribe [:a-sub]))\n\n     then the computation function must be written to expect a single value\n     as the 1st argument:\n\n        (fn [a _] ...)\n\n  3. Syntax Sugar\n\n     (reg-sub\n       :a-b-sub\n       :<- [:a-sub]\n       :<- [:b-sub]\n       (fn [[a b] [_]] {:a a :b b}))\n\n  This 3rd variation is syntactic sugar for the 2nd. Pairs are supplied instead\n  of an `input signals` functions. Each pair starts with a `:<-` and a subscription\n  vector follows.\n\n  For further understanding, read `/docs`, and look at the detailed comments in\n  /examples/todomvc/src/subs.cljs\n  "],"~$query->reaction",["^ ","^E","~$mranderson048.re-frame.v0v10v6.re-frame.subs/query->reaction","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",18,"^8",1,"^9",18,"^:",21,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",18,"^8",6,"^9",18,"^:",21],"^3Y","~$cljs.core/Atom"],"~$clear-all-handlers!",["^ ","^3:",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",36,"^8",7,"^9",36,"^:",26,"^3;",["^1:",["^3<",["^1:",[[]]]]],"^3=","Unregisters all existing subscription handlers"],"^E","~$mranderson048.re-frame.v0v10v6.re-frame.subs/clear-all-handlers!","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^:",26,"^3?",["^1:",[[]]],"^3@",null,"^3A",["^1:",[null,null]],"^8",1,"^3B",false,"^7",36,"^3C",["^D",["^3Q","~$clj-nil"]],"^9",36,"^3E",0,"^3F",true,"^3;",["^1:",["^3<",["^1:",[[]]]]],"^3=","Unregisters all existing subscription handlers"],"~$cache-lookup",["^ ","^3:",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",65,"^8",7,"^9",65,"^:",19,"^3;",["^1:",["^3<",["^1:",[["^3H"],["^3H","~$dyn-v"]]]]],"^3U",["^ ","^3B",false,"^3V",2,"^3E",2,"^3?",["^1:",[["^3H"],["^3H","^48"]]],"^3;",["^1:",[["^3H"],["^3H","^48"]]],"^3A",["^1:",[null,null]]]],"^E","~$mranderson048.re-frame.v0v10v6.re-frame.subs/cache-lookup","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^:",19,"^3U",["^ ","^3B",false,"^3V",2,"^3E",2,"^3?",["^1:",[["^3H"],["^3H","^48"]]],"^3;",["^1:",[["^3H"],["^3H","^48"]]],"^3A",["^1:",[null,null]]],"^3?",["^1:",[["^3H"],["^3H","^48"]]],"^3@",null,"^3V",2,"^3A",["^1:",[null,null]],"^8",1,"^3B",false,"^3X",[["^ ","^3V",1,"^3B",false,"^3Y","^3Q"],["^ ","^3V",2,"^3B",false,"^3Y",["^D",["^3Q","^46"]]]],"^7",65,"^9",65,"^3E",2,"^3F",true,"^3;",["^1:",[["^3H"],["^3H","^48"]]]],"~$map-vals",["^ ","^3:",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",163,"^8",8,"^9",163,"^:",16,"^3L",true,"^3;",["^1:",["^3<",["^1:",[["~$f","~$m"]]]]],"^3=","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"^3L",true,"^E","~$mranderson048.re-frame.v0v10v6.re-frame.subs/map-vals","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^:",16,"^3?",["^1:",[["~$f","~$m"]]],"^3@",null,"^3A",["^1:",[null,null]],"^8",1,"^3B",false,"^7",163,"^3C",["^D",["^3D","^3Q"]],"^9",163,"^3E",2,"^3F",true,"^3;",["^1:",["^3<",["^1:",[["~$f","~$m"]]]]],"^3=","Returns a new version of 'm' in which 'f' has been applied to each value.\n  (map-vals inc {:a 4, :b 2}) => {:a 5, :b 3}"],"~$kind",["^ ","^E","~$mranderson048.re-frame.v0v10v6.re-frame.subs/kind","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",10,"^8",1,"^9",10,"^:",10,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",10,"^8",6,"^9",10,"^:",10],"^3Y","~$cljs.core/Keyword"],"~$clear-subscription-cache!",["^ ","^3:",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",20,"^8",7,"^9",20,"^:",32,"^3;",["^1:",["^3<",["^1:",[[]]]]],"^3=","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running on-dispose on all cached subscriptions\n     2. These on-dispose will then do the removal of themselves.\n\n  This is a development time tool. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"^E","~$mranderson048.re-frame.v0v10v6.re-frame.subs/clear-subscription-cache!","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^:",32,"^3?",["^1:",[[]]],"^3@",null,"^3A",["^1:",[null,null]],"^8",1,"^3B",false,"^7",20,"^3C",["^D",["^3Q","^46"]],"^9",20,"^3E",0,"^3F",true,"^3;",["^1:",["^3<",["^1:",[[]]]]],"^3=","Causes all subscriptions to be removed from the cache.\n  Does this by:\n     1. running on-dispose on all cached subscriptions\n     2. These on-dispose will then do the removal of themselves.\n\n  This is a development time tool. Useful when reloading Figwheel code\n  after a React exception, because React components won't have been\n  cleaned up properly. And this, in turn, means the subscriptions within those\n  components won't have been cleaned up correctly. So this forces the issue."],"~$map-signals",["^ ","^3:",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^7",171,"^8",7,"^9",171,"^:",18,"^3;",["^1:",["^3<",["^1:",[["~$f","^3M"]]]]],"^3=","Runs f over signals. Signals may take several\n  forms, this function handles all of them."],"^E","~$mranderson048.re-frame.v0v10v6.re-frame.subs/map-signals","^6","mranderson048/re_frame/v0v10v6/re_frame/subs.cljc","^:",18,"^3?",["^1:",[["~$f","^3M"]]],"^3@",null,"^3A",["^1:",[null,null]],"^8",1,"^3B",false,"^7",171,"^3C",["^D",["^3D","^3P","^3Q","^3R"]],"^9",171,"^3E",2,"^3F",true,"^3;",["^1:",["^3<",["^1:",[["~$f","^3M"]]]]],"^3=","Runs f over signals. Signals may take several\n  forms, this function handles all of them."]],"^18",["^ ","^P","^P","^Q","^P","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^D",["~:dyn-v","~:tags","~:sub/run","~:else","~:<-","~:sub","~:sub/create","~:warn","~:value","~:operation","~:start","~:duration","~:query-v","~:cached?","~:sub/dispose","~:error","~:input-signals","~:end","~:reaction","~:op-type"]],"~:order",["^4I","^4K","^4M","^4W","^4E","^4R","^4P","^4V","^4N","^4O","^4U","^4J","^4Q","^4S","^4D","^4G","^4T","^4H","^4F","^4L"]],"^1?",["^ ","^U",["^D",[]]],"^1@",["^ "],"^1A",["^S","^R","^K","^L","^M","^N","^O","^P"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1O",[["^4[","~:static-fns"],true,["^4[","~:elide-asserts"],false,["^4[","~:optimize-constants"],null,["^4[","^1F"],null,["^4[","~:external-config"],null,["^4[","~:tooling-config"],null,["^4[","~:emit-constants"],null,["^4[","~:load-tests"],null,["^4[","~:infer-externs"],true,["^4[","^1H"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^4[","~:fn-invoke-direct"],null,["^4[","~:source-map"],"/dev/null"]]]