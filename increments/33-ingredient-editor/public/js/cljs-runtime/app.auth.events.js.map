{"version":3,"sources":["app/auth/events.cljs"],"sourcesContent":["(ns app.auth.events\n  (:require [re-frame.core :refer [reg-event-fx reg-event-db after reg-cofx]]\n            [cljs.reader :refer [read-string]]))\n\n(def cheffy-user-key \"cheffy-user\")\n\n(defn set-user-ls!\n  [{:keys [auth]}]\n  (when (:uid auth) (.setItem js/localStorage cheffy-user-key (str auth))))\n\n(defn remove-user-ls!\n  []\n  (.removeItem js/localStorage cheffy-user-key))\n\n(def set-user-interceptors [(after set-user-ls!)])\n(def remove-user-interceptors [(after remove-user-ls!)])\n\n(reg-cofx\n :local-store-user\n (fn [cofx _]\n   (assoc cofx :local-store-user\n          (read-string\n           (.getItem js/localStorage cheffy-user-key)))))\n\n(reg-event-fx\n :sign-up\n set-user-interceptors\n (fn [{:keys [db]} [_ {:keys [first-name last-name email password]}]]\n   {:db (-> db\n            (assoc-in [:auth :uid] email)\n            (assoc-in [:users email] {:id email\n                                      :profile {:first-name first-name\n                                                :last-name last-name\n                                                :email email\n                                                :password password\n                                                :img \"img/avatar.jpg\"}\n                                      :saved #{}\n                                      :inboxes {}}))\n    :dispatch [:set-active-page :saved]\n    :navigate-to {:path \"/saved\"}}))\n\n(reg-event-fx\n :log-in\n set-user-interceptors\n (fn [{:keys [db]} [_ {:keys [email password]}]]\n   (let [user (get-in db [:users email])\n         correct-password? (= (get-in user [:profile :password]) password)]\n     (cond\n       (not user)\n       {:db (assoc-in db [:errors :email] \"User not found\")}\n\n       (not correct-password?)\n       {:db (assoc-in db [:errors :email] \"Wrong password\")}\n\n       correct-password?\n       {:db (-> db\n                (assoc-in [:auth :uid] email)\n                (update-in [:errors] dissoc :email))\n        :dispatch [:set-active-page :saved]\n        :navigate-to {:path \"/saved\"}}))))\n\n(reg-event-fx\n :log-out\n remove-user-interceptors\n (fn [{:keys [db]} _]\n   {:db (assoc-in db [:auth :uid] nil)\n    :dispatch [:set-active-page :recipes]\n    :navigate-to {:path \"/recipes\"}}))\n\n(reg-event-db\n :update-profile\n (fn [db [_ profile]]\n   (let [uid (get-in db [:auth :uid])]\n     (update-in db [:users uid :profile] merge (select-keys profile [:first-name :last-name])))))\n\n(reg-event-fx\n :delete-account\n remove-user-interceptors\n (fn [{:keys [db]} _]\n   (let [uid (get-in db [:auth :uid])]\n     {:db (-> db\n              (assoc-in [:auth :uid] nil)\n              (update-in [:users] dissoc uid))\n      :dispatch [:set-active-page :recipes]\n      :navigate-to {:path \"/recipes\"}})))\n"],"mappings":"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","names":["app.auth.events/cheffy-user-key","p__25915","map__25916","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","app.auth.events/set-user-ls!","auth","js/localStorage","app.auth.events/remove-user-ls!","app.auth.events/set-user-interceptors","re-frame.core/after","app.auth.events/remove-user-interceptors","G__25918","G__25919","re-frame.core/reg-cofx","cofx","_","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","p__25924","p__25925","map__25928","vec__25929","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__25932","db","first-name","last-name","email","password","cljs.core/assoc-in","p__25944","p__25945","map__25946","vec__25947","map__25950","user","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","correct-password?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/not","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/dissoc","p__25953","map__25954","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__25956","vec__25957","profile","uid","cljs.core/merge","cljs.core/select-keys","p__25960","map__25961"]}