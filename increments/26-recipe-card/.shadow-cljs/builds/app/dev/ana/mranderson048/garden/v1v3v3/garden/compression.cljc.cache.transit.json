["^ ","~:output",["^ ","~:js","goog.provide('mranderson048.garden.v1v3v3.garden.compression');\ngoog.require('cljs.core');\n/**\n * Return a function which when given a string will return a map\n *   containing the chunk of text matched by re, it's size, and tag.\n */\nmranderson048.garden.v1v3v3.garden.compression.token_fn = (function mranderson048$garden$v1v3v3$garden$compression$token_fn(p__24628){\nvar vec__24629 = p__24628;\nvar tag = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24629,(0),null);\nvar re = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__24629,(1),null);\nreturn ((function (vec__24629,tag,re){\nreturn (function (s){\nvar temp__5457__auto__ = cljs.core.re_find(re,s);\nif(cljs.core.truth_(temp__5457__auto__)){\nvar chunk = temp__5457__auto__;\nreturn new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223),tag,new cljs.core.Keyword(null,\"chunk\",\"chunk\",-1191159620),chunk,new cljs.core.Keyword(null,\"size\",\"size\",1098693007),cljs.core.count(chunk)], null);\n} else {\nreturn null;\n}\n});\n;})(vec__24629,tag,re))\n});\n/**\n * Given an arbitrary number of [tag regex] pairs, return a function\n *   which when given a string s will return the first matching token of s.\n *   Token precedence is determined by the order of the pairs. The first\n *   and last pairs have the highest and lowest precedence respectively.\n */\nmranderson048.garden.v1v3v3.garden.compression.tokenizer = (function mranderson048$garden$v1v3v3$garden$compression$tokenizer(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___24674 = arguments.length;\nvar i__4731__auto___24675 = (0);\nwhile(true){\nif((i__4731__auto___24675 < len__4730__auto___24674)){\nargs__4736__auto__.push((arguments[i__4731__auto___24675]));\n\nvar G__24677 = (i__4731__auto___24675 + (1));\ni__4731__auto___24675 = G__24677;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((0) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((0)),(0),null)):null);\nreturn mranderson048.garden.v1v3v3.garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic(argseq__4737__auto__);\n});\n\nmranderson048.garden.v1v3v3.garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic = (function (tags_PLUS_regexes){\nvar fs = cljs.core.map.cljs$core$IFn$_invoke$arity$2(mranderson048.garden.v1v3v3.garden.compression.token_fn,tags_PLUS_regexes);\nreturn ((function (fs){\nreturn (function (s){\nreturn cljs.core.some(((function (fs){\nreturn (function (p1__24642_SHARP_){\nreturn (p1__24642_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__24642_SHARP_.cljs$core$IFn$_invoke$arity$1(s) : p1__24642_SHARP_.call(null,s));\n});})(fs))\n,fs);\n});\n;})(fs))\n});\n\nmranderson048.garden.v1v3v3.garden.compression.tokenizer.cljs$lang$maxFixedArity = (0);\n\n/** @this {Function} */\nmranderson048.garden.v1v3v3.garden.compression.tokenizer.cljs$lang$applyTo = (function (seq24643){\nvar self__4718__auto__ = this;\nreturn self__4718__auto__.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq24643));\n});\n\n/**\n * Tokenizer used during stylesheet compression.\n */\nmranderson048.garden.v1v3v3.garden.compression.stylesheet_tokenizer = mranderson048.garden.v1v3v3.garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"string\",\"string\",-1989541586),/^\\\"(?:\\\\.|[^\\\"])*\\\"/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"r-brace\",\"r-brace\",-1335738887),/^\\s*\\{\\s*/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"l-brace\",\"l-brace\",613286657),/^;?\\s*}/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"r-paren\",\"r-paren\",-1688338021),/^\\s*\\(\\s*/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"l-paren\",\"l-paren\",2052672514),/^\\s*\\)/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"comma\",\"comma\",1699024745),/^,\\s*/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"colon\",\"colon\",-965200945),/^:\\s*/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"semicolon\",\"semicolon\",797086549),/^;/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"space+\",\"space+\",378127624),/^ +/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"white-space+\",\"white-space+\",1452157162),/^\\s+/], null),new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"any\",\"any\",1705907423),/^./], null)], 0));\n/**\n * Compress a string of CSS using a basic compressor.\n */\nmranderson048.garden.v1v3v3.garden.compression.compress_stylesheet = (function mranderson048$garden$v1v3v3$garden$compression$compress_stylesheet(stylesheet){\nvar s1 = stylesheet;\nvar s2 = \"\";\nwhile(true){\nvar temp__5455__auto__ = (mranderson048.garden.v1v3v3.garden.compression.stylesheet_tokenizer.cljs$core$IFn$_invoke$arity$1 ? mranderson048.garden.v1v3v3.garden.compression.stylesheet_tokenizer.cljs$core$IFn$_invoke$arity$1(s1) : mranderson048.garden.v1v3v3.garden.compression.stylesheet_tokenizer.call(null,s1));\nif(cljs.core.truth_(temp__5455__auto__)){\nvar map__24664 = temp__5455__auto__;\nvar map__24664__$1 = (((((!((map__24664 == null))))?(((((map__24664.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__24664.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__24664):map__24664);\nvar tag = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24664__$1,new cljs.core.Keyword(null,\"tag\",\"tag\",-1290361223));\nvar chunk = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24664__$1,new cljs.core.Keyword(null,\"chunk\",\"chunk\",-1191159620));\nvar size = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__24664__$1,new cljs.core.Keyword(null,\"size\",\"size\",1098693007));\nvar G__24687 = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s1,size);\nvar G__24688 = [s2,cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var G__24671 = tag;\nvar G__24671__$1 = (((G__24671 instanceof cljs.core.Keyword))?G__24671.fqn:null);\nswitch (G__24671__$1) {\ncase \"string\":\nreturn chunk;\n\nbreak;\ncase \"r-brace\":\nreturn \"{\";\n\nbreak;\ncase \"l-brace\":\nreturn \"}\";\n\nbreak;\ncase \"r-paren\":\nreturn \"(\";\n\nbreak;\ncase \"l-paren\":\nreturn \")\";\n\nbreak;\ncase \"comma\":\nreturn \",\";\n\nbreak;\ncase \"semi-comma\":\nreturn \";\";\n\nbreak;\ncase \"colon\":\nreturn \":\";\n\nbreak;\ncase \"space+\":\nreturn \" \";\n\nbreak;\ncase \"white-space+\":\nreturn \"\";\n\nbreak;\ndefault:\nreturn chunk;\n\n}\n})())].join('');\ns1 = G__24687;\ns2 = G__24688;\ncontinue;\n} else {\nreturn s2;\n}\nbreak;\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","Stylesheet compression utilities.","~:file","mranderson048/garden/v1v3v3/garden/compression.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",51],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$mranderson048.garden.v1v3v3.garden.compression","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^L","~$goog","^M"],"~:seen",["^E",[]],"~:uses",null,"~:require-macros",["^ ","^L","^L"],"~:form",["~#list",["~$ns","^G","Stylesheet compression utilities."]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^M","^L"]],"^I","^G","~:resource-id",["~:shadow.build.classpath/resource","mranderson048/garden/v1v3v3/garden/compression.cljc"],"~:compiled-at",1551693808179,"~:resource-name","mranderson048/garden/v1v3v3/garden/compression.cljc","~:warnings",[],"~:source","(ns mranderson048.garden.v1v3v3.garden.compression\n  \"Stylesheet compression utilities.\"\n  #?(:clj\n     (:import (java.io StringReader StringWriter)\n               (com.yahoo.platform.yui.compressor CssCompressor))))\n\n;; ---------------------------------------------------------------------\n;; Clojure\n\n;; Clojure stylesheet compression leverages the YUI Compressor as it\n;; provides a performant and excellent solution to CSS compression.\n\n#?(:clj\n   (defn compress-stylesheet\n     \"Compress a stylesheet with the YUI CSSCompressor. Set\n  line-break-position to -1 for no line breaks, 0 for a line break\n  after each rule, and n > 0 for a line break after at most n\n  columns. Defaults to no -1\"\n     ([stylesheet]\n      (compress-stylesheet stylesheet -1))\n     ([^String stylesheet line-break-position]\n      (with-open [reader (StringReader. stylesheet)\n                  writer (StringWriter.)]\n        (doto (CssCompressor. reader)\n          (.compress writer line-break-position))\n        (str writer)))))\n\n;; ---------------------------------------------------------------------\n;; ClojureScript\n\n;; ClojureScript stylesheet compression uses a simple tokenizer and\n;; loop/recur to construct a new string of minified CSS.\n\n#?(:cljs\n   (defn- token-fn\n     \"Return a function which when given a string will return a map\n  containing the chunk of text matched by re, it's size, and tag.\"\n     [[tag re]]\n     (fn [s]\n       (when-let [chunk (re-find re s)]\n         {:tag tag\n          :chunk chunk\n          :size (count chunk)}))))\n\n#?(:cljs\n   (defn- tokenizer\n     \"Given an arbitrary number of [tag regex] pairs, return a function\n  which when given a string s will return the first matching token of s.\n  Token precedence is determined by the order of the pairs. The first\n  and last pairs have the highest and lowest precedence respectively.\"\n     [& tags+regexes]\n     (let [fs (map token-fn tags+regexes)]\n       (fn [s]\n         (some #(% s) fs)))))\n\n#?(:cljs\n   (def\n     ^{:private true\n       :doc \"Tokenizer used during stylesheet compression.\"}\n     stylesheet-tokenizer\n     (tokenizer\n      ;; String literals\n      [:string #\"^\\\"(?:\\\\.|[^\\\"])*\\\"\"]\n      ;; Delimiters\n      [:r-brace #\"^\\s*\\{\\s*\"]\n      [:l-brace #\"^;?\\s*}\"]\n      [:r-paren #\"^\\s*\\(\\s*\"]\n      [:l-paren #\"^\\s*\\)\"]\n      [:comma #\"^,\\s*\"]\n      [:colon #\"^:\\s*\"]\n      [:semicolon #\"^;\"]\n      ;; White space\n      [:space+ #\"^ +\"]\n      [:white-space+ #\"^\\s+\"]\n      ;; Everything else\n      [:any #\"^.\"])))\n\n#?(:cljs\n   (defn compress-stylesheet\n     \"Compress a string of CSS using a basic compressor.\"\n     [stylesheet]\n     (loop [s1 stylesheet s2 \"\"]\n       (if-let [{:keys [tag chunk size]} (stylesheet-tokenizer s1)]\n         (recur (subs s1 size)\n                (str s2 (case tag\n                          :string chunk\n                          :r-brace \"{\"\n                          :l-brace \"}\"\n                          :r-paren \"(\"\n                          :l-paren \")\"\n                          :comma \",\"\n                          :semi-comma \";\"\n                          :colon \":\"\n                          :space+ \" \"\n                          :white-space+ \"\"\n                          chunk)))\n         s2))))\n","~:reader-features",["^E",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;AAkCG;;;;AAAA,AAAAA,AAAOG;AAAP,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAGIG;AAHJ,AAAAF,AAAAD,AAAA,AAAA,AAGQI;AAHR,AAIE;AAAKC;AAAL,AACE,AAAAC,AAAiB,AAACE,AAAQJ,AAAGC;AAA7B,AAAA,AAAAC;AAAA,AAAA,AAAAA,AAAWC;AAAX,AAAA,AAAA,AAAA,AAAA,AACQJ,AACEI,AACD,AAACE,AAAMF;;AAHhB;;;;;AAMJ,AAAA;;;;;;AAAA,AAAAG,AAAOM;AAAP,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAOE,AAKFI;AALL,AAME,AAAMC,AAAG,AAACC,AAAIpB,AAASkB;AAAvB,AACE;AAAKf;AAAL,AACE,AAAA,AAACmB;AAADD;AAAA,AAAO,AAAAA,AAAAA,AAAAA,AAAGlB,AAAAA;;AAAGgB;;;;;AARnB,AAAA,AAAA,AAAOL;;AAAP;AAAA,AAAA,AAAA,AAAAC,AAAOD;AAAP,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAWA;;;AAGEQ,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;AAkBH;;;AAAA,AAAMC,AAEHC;AAFH,AAGE,AAAOC,AAAGD;AAAV,AAAqBE;;AAArB,AACE,AAAAC,AAAkC,AAACN,AAAAA,AAAAA,AAAqBI,AAAAA;AAAxD,AAAA,AAAAE;AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAiB7B;AAAjB,AAAAiC,AAAAJ,AAAA,AAAqBzB;AAArB,AAAA6B,AAAAJ,AAAA,AAA2BK;AAA3B,AACE,AAAO,AAACC,AAAKT,AAAGQ;AACT,AAAKP,AAAG,AAAAS,AAAMpC;AAANoC,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACUhC;;;AADV;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;;AAWEA;;;;;;;;AACjBuB","names",["p__24628","vec__24629","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","mranderson048.garden.v1v3v3.garden.compression/token-fn","tag","re","s","temp__5457__auto__","chunk","cljs.core/re-find","cljs.core/count","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","mranderson048.garden.v1v3v3.garden.compression/tokenizer","seq24643","self__4718__auto__","cljs.core/seq","tags+regexes","fs","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__24642#","cljs.core/some","mranderson048.garden.v1v3v3.garden.compression/stylesheet-tokenizer","mranderson048.garden.v1v3v3.garden.compression.tokenizer.cljs$core$IFn$_invoke$arity$variadic","mranderson048.garden.v1v3v3.garden.compression/compress-stylesheet","stylesheet","s1","s2","temp__5455__auto__","map__24664","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","size","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","G__24671","cljs.core/Keyword"]]],"~:cache-keys",["~#cmap",[["~:macro","^L"],[1549013760000],["^X","goog/math/math.js"],[1538195417000,"^M","~$goog.array","~$goog.asserts"],["^X","mranderson048/garden/v1v3v3/garden/compression.cljc"],[1544640735000,"^M","^L"],["^X","goog/array/array.js"],[1538195417000,"^M","^1;"],["^X","goog/debug/error.js"],[1538195417000,"^M"],["^X","goog/dom/nodetype.js"],[1538195417000,"^M"],["^X","goog/object/object.js"],[1538195417000,"^M"],"~:SHADOW-TIMESTAMP",[1549286327000,1549013760000],["^X","goog/math/long.js"],[1538195417000,"^M","^1;","~$goog.reflect"],["^X","goog/functions/functions.js"],[1538195417000,"^M"],["^X","goog/structs/map.js"],[1538195417000,"^M","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^X","goog/asserts/asserts.js"],[1538195417000,"^M","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^X","goog/uri/uri.js"],[1538195417000,"^M","^1:","^1;","^1C","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^X","goog/base.js"],[1538195417000],["^X","goog/structs/structs.js"],[1538195417000,"^M","^1:","^1@"],["^X","goog/string/string.js"],[1538195417000,"^M"],["^X","goog/reflect/reflect.js"],[1538195417000,"^M"],["^X","goog/string/stringbuffer.js"],[1538195417000,"^M"],["^X","goog/iter/iter.js"],[1538195417000,"^M","^1:","^1;","~$goog.functions","~$goog.math"],["^X","cljs/core.cljs"],[1549013760000,"~$goog.math.Long","~$goog.math.Integer","^1C","^1@","^1:","~$goog.Uri","~$goog.string.StringBuffer"],["^X","goog/math/integer.js"],[1538195417000,"^M"],["^X","goog/uri/utils.js"],[1538195417000,"^M","^1:","^1;","^1C"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","Stylesheet compression utilities.","^7","mranderson048/garden/v1v3v3/garden/compression.cljc","^8",1,"^9",5,"^:",1,"^;",51],"^<",["^ ","^=","^>","^?","^@","^A","^B"],"^C",null,"^D",["^E",[]],"^F","^G","^J",null,"^K",["^ ","^L","^L","^M","^M"],"^N",["^E",[]],"^O",null,"~:defs",["^ ","~$token-fn",["^ ","~:protocol-inline",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/compression.cljc","^8",35,"^9",11,"^:",35,"^;",19,"~:private",true,"~:arglists",["^R",["~$quote",["^R",[[["~$tag","~$re"]]]]]],"^6","Return a function which when given a string will return a map\n  containing the chunk of text matched by re, it's size, and tag."],"^1S",true,"^F","~$mranderson048.garden.v1v3v3.garden.compression/token-fn","^7","mranderson048/garden/v1v3v3/garden/compression.cljc","^;",19,"~:method-params",["^R",[["~$p__24628"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^9",4,"~:variadic?",false,"^8",35,"~:ret-tag","~$function","^:",35,"~:max-fixed-arity",1,"~:fn-var",true,"^1T",["^R",["^1U",["^R",[[["^1V","^1W"]]]]]],"^6","Return a function which when given a string will return a map\n  containing the chunk of text matched by re, it's size, and tag."],"~$tokenizer",["^ ","^1R",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/compression.cljc","^8",46,"^9",11,"^:",46,"^;",20,"^1S",true,"^1T",["^R",["^1U",["^R",[["~$&","~$tags+regexes"]]]]],"^6","Given an arbitrary number of [tag regex] pairs, return a function\n  which when given a string s will return the first matching token of s.\n  Token precedence is determined by the order of the pairs. The first\n  and last pairs have the highest and lowest precedence respectively.","~:top-fn",["^ ","^21",true,"~:fixed-arity",0,"^24",0,"^1Y",[["^R",["^27"]]],"^1T",["^R",[["~$&","^27"]]],"^20",["^R",[null]]]],"^1S",true,"^F","~$mranderson048.garden.v1v3v3.garden.compression/tokenizer","^7","mranderson048/garden/v1v3v3/garden/compression.cljc","^;",20,"^28",["^ ","^21",true,"^29",0,"^24",0,"^1Y",[["^R",["^27"]]],"^1T",["^R",[["~$&","^27"]]],"^20",["^R",[null]]],"^1Y",[["^R",["^27"]]],"^1[",null,"^29",0,"^20",["^R",[null]],"^9",4,"^21",true,"~:methods",[["^ ","^29",0,"^21",true,"~:tag","^23"]],"^8",46,"^22","~$any","^:",46,"^24",0,"^25",true,"^1T",["^R",[["~$&","^27"]]],"^6","Given an arbitrary number of [tag regex] pairs, return a function\n  which when given a string s will return the first matching token of s.\n  Token precedence is determined by the order of the pairs. The first\n  and last pairs have the highest and lowest precedence respectively."],"~$stylesheet-tokenizer",["^ ","^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/compression.cljc","^8",60,"^9",6,"^:",60,"^;",26,"^1S",true,"^6","Tokenizer used during stylesheet compression."],"^1S",true,"^F","~$mranderson048.garden.v1v3v3.garden.compression/stylesheet-tokenizer","^7","mranderson048/garden/v1v3v3/garden/compression.cljc","^;",26,"^9",4,"^8",57,"^:",60,"^2<","^23","^6","Tokenizer used during stylesheet compression."],"~$compress-stylesheet",["^ ","^1R",null,"^5",["^ ","^7","mranderson048/garden/v1v3v3/garden/compression.cljc","^8",79,"^9",10,"^:",79,"^;",29,"^1T",["^R",["^1U",["^R",[["~$stylesheet"]]]]],"^6","Compress a string of CSS using a basic compressor."],"^F","~$mranderson048.garden.v1v3v3.garden.compression/compress-stylesheet","^7","mranderson048/garden/v1v3v3/garden/compression.cljc","^;",29,"^1Y",["^R",[["^2A"]]],"^1[",null,"^20",["^R",[null,null]],"^9",4,"^21",false,"^8",79,"^22","~$string","^:",79,"^24",1,"^25",true,"^1T",["^R",["^1U",["^R",[["^2A"]]]]],"^6","Compress a string of CSS using a basic compressor."]],"^P",["^ ","^L","^L"],"~:cljs.analyzer/constants",["^ ","^N",["^E",["~:l-brace","~:l-paren","~:space+","~:comma","~:white-space+","~:string","~:size","~:colon","~:semicolon","~:r-brace","^2<","~:r-paren","~:chunk","~:any"]],"~:order",["^2<","^2P","^2K","^2J","^2N","^2E","^2O","^2F","^2H","^2L","^2M","^2G","^2I","^2Q"]],"^T",["^ "],"^U",["^ "],"^V",["^M","^L"]],"^I","^G","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^18",[["^2U","~:static-fns"],true,["^2U","~:elide-asserts"],false,["^2U","~:optimize-constants"],null,["^2U","^["],null,["^2U","~:external-config"],null,["^2U","~:tooling-config"],null,["^2U","~:emit-constants"],null,["^2U","~:load-tests"],null,["^2U","~:infer-externs"],true,["^2U","^11"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^2U","~:fn-invoke-direct"],null,["^2U","~:source-map"],"/dev/null"]]]