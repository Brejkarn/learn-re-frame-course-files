{"version":3,"sources":["shadow/cljs/npm/cli.cljs"],"sourcesContent":["(ns shadow.cljs.npm.cli\n  (:refer-clojure :exclude (run!))\n  (:require\n    [\"path\" :as path]\n    [\"fs\" :as fs]\n    [\"os\" :as os]\n    [\"child_process\" :as cp]\n    [\"readline-sync\" :as rl-sync] ;; FIXME: drop this?\n    [\"mkdirp\" :as mkdirp]\n    [\"net\" :as node-net]\n    [\"which\" :as which]\n    [cljs.core.async :as async :refer (go go-loop alt!)]\n    #_[cljs.tools.reader :as reader]\n    [cljs.reader :as reader]\n    [clojure.string :as str]\n    [goog.object :as gobj]\n    [goog.string.format]\n    [goog.string :refer (format)]\n    [shadow.cljs.npm.util :as util]\n    [shadow.cljs.npm.client :as client]\n    [shadow.cljs.devtools.cli-opts :as opts]\n    ))\n\n(defn log [& args]\n  (js/process.stderr.write (str (->> args (map str) (str/join \" \")) \"\\n\")))\n\n(def jar-version\n  (-> (js/require \"../../package.json\")\n      (gobj/get \"jar-version\")))\n\n(defn file-older-than [a b]\n  (let [xa (fs/statSync a)\n        xb (fs/statSync b)]\n    (> (.-mtime xa) (.-mtime xb))))\n\n(defn ensure-dir [dir]\n  (when-not (fs/existsSync dir)\n    (fs/mkdirSync dir)))\n\n(defn is-directory? [path]\n  (-> (fs/lstatSync path)\n      (.isDirectory)))\n\n(defn is-windows? []\n  (str/includes? js/process.platform \"win32\"))\n\n(defn run [project-root cmd args proc-opts]\n  (let [spawn-opts\n        (-> {:cwd project-root\n             :stdio \"inherit\"}\n            (merge proc-opts)\n            (clj->js))\n\n        executable\n        (which/sync cmd #js {:nothrow true})]\n\n    (if-not executable\n      (throw (ex-info (str \"Executable '\" cmd \"' not found on system path.\") {:cmd cmd :args args}))\n      (cp/spawnSync executable (into-array args) spawn-opts))))\n\n;; same as run! but preserves the exit code of the process\n;; must be run as the last step since it will kill the node process after\n(defn run! [project-root cmd args proc-opts]\n  (let [executable (which/sync cmd #js {:nothrow true})]\n    (if-not executable\n      (do (println (str \"Executable '\" cmd \"' not found on system path.\"))\n          (js/process.exit 1))\n\n      (let [node-server (node-net/Server.)]\n\n        (.on node-server \"connection\"\n          (fn [^js socket]\n            ;; send OK and close socket\n            ;; this is not meant as a persistent connection as I need to verify first\n            ;; under which circumstances that may disconnect for \"valid\" reasons\n            ;; like switching the WiFi network, sleep mode etc\n            ;; instead just have the java proc periodically check if this is still alive\n            (.end socket \"OK\")\n\n            (.on socket \"error\"\n              (fn [err]\n                (js/console.warn \"node-server socket err\" err))\n              )))\n\n        (.on node-server \"error\"\n          (fn [err]\n            (js/console.warn \"node-server err\" err)))\n\n        (js/process.on \"SIGTERM\"\n          (fn []\n            (.close node-server)\n            (js/process.exit 0)))\n\n        (js/process.on \"SIGINT\"\n          (fn []\n            (.close node-server)\n            (js/process.exit 0)))\n\n        (.listen node-server\n          (fn []\n            (let [cli-port\n                  (-> node-server (.address) (.-port))\n\n                  spawn-opts\n                  (-> {:cwd project-root\n                       :env (-> #js {\"SHADOW_CLI_PORT\" cli-port}\n                                (js/Object.assign js/process.env))\n                       :stdio \"inherit\"}\n                      (merge proc-opts)\n                      (clj->js))\n\n                  ^js proc\n                  (cp/spawn executable (into-array args) spawn-opts)]\n\n              (.on proc \"error\"\n                (fn [^js error]\n                  (if (and error (= \"ENOENT\" (. error -errno)))\n                    (log (str \"shadow-cljs - failed to execute \\\"\" cmd \"\\\", command not found.\"))\n                    (log (str \"shadow-cljs - failed to execute \\\"\" cmd \"\\\", \" (. error -message))))))\n\n              (.on proc \"exit\"\n                (fn [code signal]\n                  (.close node-server)\n                  (js/process.exit code)))\n\n              proc\n              )))))))\n\n(defn run-java [project-root args opts]\n  (let [^js result\n        (run project-root \"java\" args opts)\n\n        status\n        (.-status result)]\n\n    (cond\n      (zero? status)\n      true\n\n      (pos? status)\n      (throw (ex-info \"java process exit with non-zero exit code\" {:tag :java-exit :status status :result result}))\n\n      (and (.-error result) (= \"ENOENT\" (.. result -error -errno)))\n      (do (log \"shadow-cljs - java not found, please install a Java8 SDK. (OpenJDK or Oracle)\")\n          (js/process.exit 1)\n          ))))\n\n(def default-config-str\n  (util/slurp (path/resolve js/__dirname \"..\" \"default-config.edn\")))\n\n(def default-config\n  (reader/read-string default-config-str))\n\n(defn ensure-config []\n  (loop [root (path/resolve)]\n    (let [config (path/resolve root \"shadow-cljs.edn\")]\n      (cond\n        (fs/existsSync config)\n        config\n\n        ;; check parent directory\n        ;; might be in $PROJECT/src/demo it should find $PROJECT/shadow-cljs.edn\n        (not= root (path/resolve root \"..\"))\n        (recur (path/resolve root \"..\"))\n\n        :else ;; ask to create default config in current dir\n        false\n        ))))\n\n(defn run-init [opts]\n  (let [config (path/resolve \"shadow-cljs.edn\")]\n    (log \"shadow-cljs - init\")\n    (log (str \"- \" config))\n\n    (when (rl-sync/keyInYN \"Create?\")\n      ;; FIXME: ask for default source path, don't just use one\n      (fs/writeFileSync config default-config-str)\n      (log \"shadow-cljs - created default configuration\")\n      config\n      )))\n\n(defn modified-dependencies? [cp-file config]\n  (let [cp (-> (util/slurp cp-file)\n               (reader/read-string))]\n\n    (or (not= (:version cp) (:version config))\n        (not= (:dependencies cp) (:dependencies config))\n        )))\n\n;; these might cause trouble when using different versions\n;; than expected by shadow-cljs.\n(def unwanted-deps\n  '#{org.clojure/clojurescript ;; we will always be on the latest version\n     org.clojure/clojure ;; can't run on 1.8\n     thheller/shadow-cljs ;; just in case, added later\n\n     ;; brought in by shadow-cljs\n     ;; breaks cache when ending up with older version\n     com.cognitect/transit-clj\n     com.cognitect/transit-java\n     })\n\n(defn drop-unwanted-deps [dependencies]\n  (->> dependencies\n       (remove (fn [[dep-id & _]]\n                 (let [fq-dep-id\n                       (if (namespace dep-id)\n                         dep-id\n                         (symbol (name dep-id) (name dep-id)))]\n\n                   (when (or (contains? unwanted-deps dep-id)\n                             (contains? unwanted-deps fq-dep-id))\n                     (js/console.warn\n                       (str \"WARNING: The \" dep-id \" dependency in shadow-cljs.edn was ignored. Default version is used and override is not allowed to ensure compatibility.\"))\n                     true))))\n       (into [])))\n\n(defn add-exclusions [dependencies]\n  (->> dependencies\n       (map (fn [[dep-id version & modifiers :as dep]]\n              (let [mods\n                    (-> (apply hash-map modifiers)\n                        (update :exclusions (fn [excl]\n                                              (->> excl\n                                                   (concat unwanted-deps)\n                                                   (distinct)\n                                                   (into [])))))]\n                (reduce-kv conj [dep-id version] mods))))\n       (into [])))\n\n(defn get-classpath [project-root {:keys [cache-root] :as config}]\n  (let [cp-file\n        (path/resolve project-root cache-root \"classpath.edn\")\n\n        use-aot\n        (not (false? (get config :aot true)))\n\n        shadow-artifact\n        (-> ['thheller/shadow-cljs (or (:version config)\n                                       jar-version)]\n            (cond->\n              use-aot\n              (conj :classifier \"aot\")))\n\n        classpath-config\n        (-> config\n            (update :dependencies drop-unwanted-deps)\n            (update :dependencies add-exclusions)\n            (update :dependencies #(into [shadow-artifact] %)))\n\n        ;; only need to rebuild the classpath if :dependencies\n        ;; or the version changed\n        updated?\n        (when (or (not (fs/existsSync cp-file))\n                  (modified-dependencies? cp-file classpath-config))\n          ;; re-create classpath by running the java helper\n          (let [jar (js/require \"shadow-cljs-jar/path\")]\n            (run-java\n              project-root\n              [\"-jar\" jar]\n              {:input (pr-str classpath-config)\n               :stdio [nil js/process.stdout js/process.stderr]})\n            true))\n\n        {:keys [files] :as classpath-data}\n        (-> (util/slurp cp-file)\n            (reader/read-string)\n            (assoc :updated? updated?))]\n\n    ;; if something in the ~/.m2 directory is deleted we need to re-fetch it\n    ;; otherwise we end up with weird errors at runtime\n    (if (every? #(fs/existsSync %) files)\n      classpath-data\n      ;; if anything is missing delete the classpath.edn and start over\n      (do (fs/unlinkSync cp-file)\n          (log \"WARN: missing dependencies, reconstructing classpath.\")\n          (recur project-root config)\n          ))))\n\n(defn print-error [ex]\n  (let [{:keys [tag] :as data}\n        (ex-data ex)]\n\n    (when (not= tag :java-exit)\n      (log \"shadow-cljs - error\" (.-message ex)))\n    ))\n\n(defn get-shared-home []\n  (path/resolve (os/homedir) \".shadow-cljs\" jar-version))\n\n(defn get-jvm-opts [project-root {:keys [source-paths jvm-opts] :as config}]\n  (let [classpath\n        (get-classpath project-root config)\n\n        classpath-str\n        (->> (:files classpath)\n             (concat source-paths)\n             (str/join path/delimiter))]\n\n    (-> []\n        (into jvm-opts)\n        (conj \"-cp\" classpath-str)\n        )))\n\n(defn run-standalone [project-root config args opts]\n  (let [cli-args\n        (-> (get-jvm-opts project-root config)\n            (conj \"clojure.main\" \"-m\" \"shadow.cljs.devtools.cli\" \"--npm\")\n            (into args))]\n\n    #_ (log \"shadow-cljs - starting ...\")\n    (run! project-root \"java\" cli-args {})))\n\n(defn get-lein-args [{:keys [lein] :as config} opts]\n  (let [{:keys [profile] :as lein-config}\n        (cond\n          (map? lein)\n          lein\n          (true? lein)\n          {})\n\n        extra-deps\n        (get-in opts [:options :dependencies])]\n\n    (-> []\n        (cond->\n          profile\n          (conj \"with-profile\" profile)\n\n          (seq extra-deps)\n          (util/reduce->\n            (fn [args dep]\n              (conj args \"update-in\" \":dependencies\" \"conj\" (pr-str dep) \"--\"))\n            extra-deps)))))\n\n(defn run-lein [project-root config args opts]\n  (let [lein-args\n        (-> (get-lein-args config opts)\n            (conj \"run\" \"-m\" \"shadow.cljs.devtools.cli\" \"--npm\")\n            (into args))]\n\n    (log \"shadow-cljs - running: lein\" (str/join \" \" lein-args))\n    (run! project-root \"lein\" lein-args {})))\n\n(defn get-clojure-args [project-root {:keys [jvm-opts] :as config} opts]\n  (let [{:keys [aliases inject]} (:deps config)\n\n        inject?\n        (not (false? inject))\n\n        opt-aliases\n        (get-in opts [:options :aliases])\n\n        aliases\n        (if-not inject?\n          aliases\n          (conj aliases :shadow-cljs-inject))\n\n        extra-deps\n        (-> {'thheller/shadow-cljs {:mvn/version jar-version}}\n            (util/reduce->\n              (fn [m [id version]]\n                (assoc m id {:mvn/version version}))\n              (get-in opts [:options :dependencies])))]\n\n    (-> []\n        (cond->\n          inject?\n          (conj\n            \"-Sdeps\"\n            (pr-str {:aliases\n                     {:shadow-cljs-inject\n                      ;; :extra-paths [\"target/shadow-cljs/aot\"]\n                      (-> {:extra-deps extra-deps}\n                          (cond->\n                            (seq jvm-opts)\n                            (assoc :jvm-opts jvm-opts))\n                          )}}))\n\n          (seq aliases)\n          (conj (str \"-A\" (->> aliases (map pr-str) (str/join \"\"))))\n\n          (seq opt-aliases)\n          (conj (str \"-A\" opt-aliases))\n          ))))\n\n(defn run-clojure [project-root config args opts]\n  (let [clojure-args\n        (-> (get-clojure-args project-root config opts)\n            (conj \"-m\" \"shadow.cljs.devtools.cli\" \"--npm\")\n            (into args))]\n\n    (log \"shadow-cljs - starting via \\\"clojure\\\"\")\n    (run! project-root \"clojure\" clojure-args {})\n    ))\n\n(defn wait-for-server-start! [port-file ^js proc]\n  (if (fs/existsSync port-file)\n    (do (js/process.stderr.write \" ready!\\n\")\n        ;; give the server some time to settle before we release it\n        ;; hopefully fixes some circleci issues\n        (js/setTimeout #(.unref proc) 500))\n    (do (js/process.stderr.write \".\")\n        (js/setTimeout #(wait-for-server-start! port-file proc) 250))\n    ))\n\n(defn server-start [project-root {:keys [lein deps cache-root] :as config} args opts]\n  (let [[server-cmd server-args]\n        (cond\n          deps\n          [\"clojure\"\n           (-> (get-clojure-args project-root config opts)\n               (conj \"-m\"))]\n\n          lein\n          [\"lein\"\n           (-> (get-lein-args config opts)\n               (conj \"run\" \"-m\"))]\n\n          :else\n          [\"java\"\n           (-> (get-jvm-opts project-root config)\n               (conj \"clojure.main\" \"-m\"))])\n\n        server-args\n        (conj server-args \"shadow.cljs.devtools.cli\" \"--npm\" \"server\")]\n\n    (js/process.stderr.write \"shadow-cljs - server starting \")\n\n    (let [cache-dir\n          (path/resolve project-root cache-root)\n\n          out-path\n          (path/resolve cache-dir \"server.stdout.log\")\n\n          err-path\n          (path/resolve cache-dir \"server.stderr.log\")\n\n          out\n          (fs/openSync out-path \"a\")\n\n          err\n          (fs/openSync err-path \"a\")\n\n          proc\n          (cp/spawn server-cmd (into-array server-args)\n            #js {:detached true\n                 :stdio #js [\"ignore\", out, err]})]\n\n      (wait-for-server-start! (path/resolve cache-dir \"cli-repl.port\") proc)\n      )))\n\n(defn server-stop [project-root config server-port-file server-pid-file args opts]\n  (let [signal (async/chan)\n\n        cli-repl\n        (-> (util/slurp server-port-file)\n            (js/parseInt 10))\n\n        socket\n        (node-net/connect\n          #js {:port cli-repl\n               :host \"localhost\"\n               :timeout 1000})]\n\n    (.on socket \"connect\" #(.write socket \"(shadow.cljs.devtools.server/remote-stop!)\\n:repl/quit\\n\"))\n    (.on socket \"error\" (fn [err]\n                          (fs/unlinkSync server-port-file)\n                          (fs/unlinkSync server-pid-file)))\n    (.on socket \"close\" #(async/close! signal))\n\n    signal))\n\n(def defaults\n  {:cache-root \".shadow-cljs\"\n   :version jar-version\n   :dependencies []})\n\n(defn merge-config-with-cli-opts [config {:keys [options] :as opts}]\n  (let [{:keys [dependencies]} options]\n    (-> config\n        (cond->\n          (seq dependencies)\n          (update :dependencies into dependencies)\n          ))))\n\n(defn print-classpath-tree\n  ([deps]\n   (print-classpath-tree deps 0))\n  ([deps level]\n   (doseq [[coord coord-deps] deps]\n     (println\n       (str\n         (when (pos? level)\n           (->> (repeat level \"\")\n                (str/join \"  \")))\n         (pr-str coord)))\n     (when coord-deps\n       (print-classpath-tree coord-deps (inc level))))))\n\n(defn print-cli-info [project-root config-path {:keys [cache-root source-paths] :as config} opts]\n  (println \"=== Version\")\n  (println \"jar:           \" jar-version)\n  (println \"cli:           \" (-> (js/require \"../../package.json\")\n                                 (gobj/get \"version\")))\n  (println \"deps:          \" (-> (js/require \"shadow-cljs-jar/package.json\")\n                                 (gobj/get \"version\")))\n  (println \"config-version:\" (:version config))\n  (println)\n\n  (println \"=== Paths\")\n  (println \"cli:    \" js/__filename)\n  (println \"config: \" config-path)\n  (println \"project:\" project-root)\n  (println \"cache:  \" cache-root)\n  (println)\n\n  (println \"=== Java\")\n  (run-java project-root [\"-version\"] {})\n  (println)\n\n  (println \"=== Source Paths\")\n  (doseq [source-path source-paths]\n    (println (path/resolve project-root source-path)))\n  (println)\n\n  (when (and (not (:lein config))\n             (not (:deps config)))\n    (println \"=== Dependencies\")\n    (let [{:keys [deps-hierarchy] :as cp-data}\n          (get-classpath project-root config)]\n\n      (print-classpath-tree deps-hierarchy))\n    (println)))\n\n(defn- getenv [envname]\n  (str (aget js/process.env envname)))\n\n(defn read-config [config-path opts]\n  (try\n    (-> (util/slurp config-path)\n        (#(reader/read-string {:readers {'shadow/env getenv}} %))\n        (merge-config-with-cli-opts opts))\n    (catch :default ex\n      ;; FIXME: missing tools.reader location information\n      ;; FIXME: show error location with excerpt like other warnings\n      (throw (ex-info (format \"failed reading config file: %s\" config-path) {:config-path config-path} ex)))))\n\n(defn guess-node-package-manager [project-root config]\n  (or (get-in config [:node-modules :managed-by])\n      (let [yarn-lock (path/resolve project-root \"yarn.lock\")]\n        (when (fs/existsSync yarn-lock)\n          :yarn))\n      :npm))\n\n(defn check-project-install! [project-root config]\n  (let [package-json-file\n        (path/resolve project-root \"package.json\")]\n\n    (or (fs/existsSync (path/resolve \"node_modules\" \"shadow-cljs\"))\n        (and (fs/existsSync package-json-file)\n             (let [pkg (js->clj (js/require package-json-file))]\n               (or (get-in pkg [\"devDependencies\" \"shadow-cljs\"])\n                   (get-in pkg [\"dependencies\" \"shadow-cljs\"]))))\n\n        ;; not installed\n        (do (log \"shadow-cljs not installed in project.\")\n            (log \"\")\n\n            (if-not (rl-sync/keyInYN \"Add it now?\")\n              false\n              (let [[pkg-cmd pkg-args]\n                    (case (guess-node-package-manager project-root config)\n                      :yarn\n                      [\"yarn\" [\"add\" \"--dev\" \"shadow-cljs\"]]\n                      :npm\n                      [\"npm\" [\"install\" \"--save-dev\" \"shadow-cljs\"]])]\n\n                (log (str \"Running: \" pkg-cmd \" \" (str/join \" \" pkg-args)))\n\n                ;; npm installs into wrong location if no package.json is present\n                (when-not (fs/existsSync package-json-file)\n                  (fs/writeFileSync package-json-file \"{}\"))\n\n                (cp/spawnSync pkg-cmd (into-array pkg-args) #js {:cwd project-root\n                                                                 :stdio \"inherit\"})\n                true))))))\n\n;; FIXME: couldn't find a \"nice\" xml library to d this for me which wasn't total overkill\n;; only nice to have would be prettier output but since its for cursive to look at\n;; I don't really care.\n(defn generate-xml [struct]\n  (cond\n    (string? struct)\n    struct\n\n    (vector? struct)\n    (let [[tag attrs & more] struct\n          tag (name tag)]\n      (str \"<\" tag\n           (when (map? attrs)\n             (->> attrs\n                  (map (fn [[key value]]\n                         (let [ns (namespace key)]\n                           (str ns (when ns \":\") (name key) \"=\\\"\" value \"\\\"\")\n                           )))\n                  (str/join \" \")\n                  (str \" \")))\n           \">\"\n           (->> (if (map? attrs) more (rest struct))\n                (map generate-xml)\n                (str/join \"\"))\n           \"</\" tag \">\"))))\n\n(defn generate-pom [project-root config-path {:keys [source-paths dependencies] :as config} opts]\n  (let [pom-path\n        (path/resolve project-root \"pom.xml\")]\n\n    (when (or (not (fs/existsSync pom-path))\n              (rl-sync/keyInYN (str pom-path \" already exists. Overwrite?\")))\n\n      ;; FIXME: allow setting this in shadow-cljs.edn\n      (let [project-name (path/basename project-root)]\n\n        (fs/writeFileSync pom-path\n          (str \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\n               \"<!-- generated by shadow-cljs pom, do not edit -->\\n\"\n               (generate-xml\n                 [:project {:xmlns \"http://maven.apache.org/POM/4.0.0\"\n                            :xmlns/xsi \"http://www.w3.org/2001/XMLSchema-instance\"\n                            :xsi/schemaLocation \"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"}\n                  [:modelVersion \"4.0.0\"]\n                  [:groupId project-name]\n                  [:artifactId project-name]\n                  [:version \"0.0.1\"]\n                  [:name project-name]\n\n                  ;; FIXME: need config for this at some point, defaults from lein\n                  [:repositories\n                   [:repository\n                    [:id \"central\"]\n                    [:url \"https://repo1.maven.org/maven2/\"]\n                    [:snapshots [:enabled \"false\"]]\n                    [:releases [:enabled \"true\"]]]\n                   [:repository\n                    [:id \"clojars\"]\n                    [:url \"https://repo.clojars.org/\"]\n                    [:snapshots [:enabled \"true\"]]\n                    [:releases [:enabled \"true\"]]]]\n\n                  (->> (into [['thheller/shadow-cljs jar-version]] dependencies)\n                       (map (fn [[dep-sym dep-version & more]]\n                              (let [id (name dep-sym)\n                                    ns (or (namespace dep-sym) id)]\n                                [:dependency\n                                 [:groupId ns]\n                                 [:artifactId id]\n                                 [:version dep-version]])))\n                       (into [:dependencies]))\n\n                  (-> [:build]\n                      (conj [:sourceDirectory (first source-paths)])\n                      (cond->\n                        (seq (rest source-paths))\n                        (conj [:plugins\n                               [:plugin\n                                [:groupId \"org.codehaus.mojo\"]\n                                [:artifactId \"build-helper-maven-plugin\"]\n                                [:executions\n                                 [:execution\n                                  [:phase \"generate-sources\"]\n                                  [:goals [:goal \"add-source\"]]\n                                  [:configuration\n                                   (->> source-paths\n                                        (map (fn [path]\n                                               [:source path]))\n                                        (into [:sources]))]]]]])))])))))))\n\n;; can't do this because running the server on windows\n;; but running shadow-cljs via WSL won't find the PID\n;; and think that the server is dead\n(defn is-server-running? [server-pid]\n  (and (fs/existsSync server-pid)\n       (let [pid (-> (util/slurp server-pid)\n                     (js/parseInt 10))]\n         (try\n           ;; returns true if signal succeeded\n           (js/process.kill pid 0)\n           (catch :default e\n             ;; throws ESRCH or other errors if signal failed\n             ;; meaning the server isn't reachable\n             false\n             )))))\n\n(defn do-start [project-root config args opts]\n  (cond\n    (:deps config)\n    (run-clojure project-root config args opts)\n\n    (:lein config)\n    (run-lein project-root config args opts)\n\n    :else\n    (run-standalone project-root config args opts)))\n\n(defn ^:export main [args]\n\n  (try\n    (let [{:keys [action options] :as opts}\n          (opts/parse args)]\n\n      (cond\n        (or (:help options)\n            (= action :help))\n        (opts/help opts)\n\n        (= action :init)\n        (run-init opts)\n\n        :else\n        (let [config-path (ensure-config)]\n          (if-not config-path\n            (do (println \"Could not find shadow-cljs.edn config file.\")\n                (println \"To create one run:\")\n                (println \"  shadow-cljs init\"))\n\n            (let [project-root\n                  (path/dirname config-path)\n\n                  args\n                  (into [] args) ;; starts out as JS array\n\n                  config\n                  (read-config config-path opts)\n\n                  {:keys [cache-root version] :as config}\n                  (merge defaults config)\n\n                  server-port-file\n                  (path/resolve project-root cache-root \"cli-repl.port\")\n\n                  server-pid-file\n                  (path/resolve project-root cache-root \"server.pid\")\n\n                  server-running?\n                  (and (fs/existsSync server-port-file)\n                       (fs/existsSync server-pid-file))]\n\n              (mkdirp/sync (path/resolve project-root cache-root))\n\n              (when (and (not server-running?) (fs/existsSync server-pid-file))\n                (log \"shadow-cljs - server pid exists but server appears to be dead, proceeding without server.\")\n                (fs/unlinkSync server-pid-file))\n\n              (log \"shadow-cljs - config:\" config-path \" cli version:\" version \" node:\" js/process.version)\n\n              (cond\n                (or (:cli-info options)\n                    (= :info action))\n                (print-cli-info project-root config-path config opts)\n\n                (= :pom action)\n                (generate-pom project-root config-path config opts)\n\n                (= :start action)\n                (if server-running?\n                  (log \"shadow-cljs - server already running\")\n                  (server-start project-root config args opts))\n\n                (= :stop action)\n                (if-not server-running?\n                  (log \"shadow-cljs - server not running\")\n                  (server-stop project-root config server-port-file server-pid-file args opts))\n\n                (= :restart action)\n                (go (when server-running?\n                      (<! (server-stop project-root config server-port-file server-pid-file args opts)))\n                    (server-start project-root config args opts))\n\n                (and server-running? (not (:force-spawn options)))\n                (client/run project-root config server-port-file opts args\n                  #(do-start project-root config args opts))\n\n                :else\n                (do-start project-root config args opts)\n                ))))))\n    (catch :default ex\n      (print-error ex)\n      (js/process.exit 1))))\n"],"mappings":"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","names":["var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","shadow.cljs.npm.cli/log","seq83244","self__4718__auto__","cljs.core/seq","args","js/process.stderr.write","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/str","clojure.string.join.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli/jar-version","js/require","G__83245","G__83246","goog.object/get","shadow.cljs.npm.cli/file-older-than","a","b","xa","js/shadow.js.shim.module$fs.statSync","xb","shadow.cljs.npm.cli/ensure-dir","dir","js/shadow.js.shim.module$fs.existsSync","js/shadow.js.shim.module$fs.mkdirSync","shadow.cljs.npm.cli/is-directory?","path","js/shadow.js.shim.module$fs.lstatSync","shadow.cljs.npm.cli/is-windows?","clojure.string/includes?","js/process.platform","shadow.cljs.npm.cli/run","project-root","cmd","proc-opts","spawn-opts","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core/clj->js","executable","G__83247","G__83248","js/shadow.js.shim.module$which.sync","cljs.core/not","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","G__83249","G__83250","G__83251","js/shadow.js.shim.module$child_process.spawnSync","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","shadow.cljs.npm.cli/run!","G__83252","G__83253","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","js/process.exit","node-server","js/shadow.js.shim.module$net.Server","socket","err","js/console.warn","js/process.on","cli-port","js/Object.assign","js/process.env","proc","G__83421","G__83422","G__83423","js/shadow.js.shim.module$child_process.spawn","error","and__4120__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli.log.cljs$core$IFn$_invoke$arity$variadic","code","signal","shadow.cljs.npm.cli/run-java","opts","result","status","shadow.cljs.npm.cli/default-config-str","shadow.cljs.npm.util/slurp","js/shadow.js.shim.module$path.resolve","js/__dirname","shadow.cljs.npm.cli/default-config","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","shadow.cljs.npm.cli/ensure-config","root","config","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli/run-init","js/shadow.js.shim.module$readline_sync.keyInYN","js/shadow.js.shim.module$fs.writeFileSync","shadow.cljs.npm.cli/modified-dependencies?","cp-file","cp","shadow.cljs.npm.cli/unwanted-deps","shadow.cljs.npm.cli/drop-unwanted-deps","dependencies","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__83254","vec__83255","seq__83256","first__83257","cljs.core/first","cljs.core/next","dep-id","_","fq-dep-id","cljs.core/namespace","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.core/name","cljs.core/contains?","cljs.core.into.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli/add-exclusions","p__83258","vec__83259","seq__83260","first__83261","version","modifiers","dep","mods","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.update.cljs$core$IFn$_invoke$arity$3","excl","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","cljs.core/reduce-kv","cljs.core/conj","p__83264","map__83265","cljs.core/PROTOCOL_SENTINEL","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.npm.cli/get-classpath","cache-root","map__83267","use-aot","cljs.core.get.cljs$core$IFn$_invoke$arity$3","shadow-artifact","or__4131__auto__","G__83268","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","classpath-config","p1__83262#","updated?","jar","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","js/process.stdout","js/process.stderr","files","classpath-data","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p1__83263#","cljs.core/every?","js/shadow.js.shim.module$fs.unlinkSync","shadow.cljs.npm.cli/print-error","ex","map__83270","tag","data","cljs.core/ex-data","shadow.cljs.npm.cli/get-shared-home","G__83272","G__83273","G__83274","js/shadow.js.shim.module$os.homedir","p__83275","map__83276","shadow.cljs.npm.cli/get-jvm-opts","source-paths","jvm-opts","classpath","classpath-str","js/shadow.js.shim.module$path.delimiter","shadow.cljs.npm.cli/run-standalone","cli-args","p__83278","map__83279","shadow.cljs.npm.cli/get-lein-args","lein","map__83281","profile","lein-config","cljs.core/map?","extra-deps","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","G__83283","shadow.cljs.npm.util/reduce->","shadow.cljs.npm.cli/run-lein","lein-args","p__83284","map__83285","shadow.cljs.npm.cli/get-clojure-args","map__83287","aliases","inject","inject?","opt-aliases","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","p__83289","vec__83290","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","m","id","G__83293","G__83294","cljs.core/pr-str","shadow.cljs.npm.cli/run-clojure","clojure-args","shadow.cljs.npm.cli/wait-for-server-start!","port-file","js/setTimeout","p__83295","map__83296","shadow.cljs.npm.cli/server-start","deps","vec__83298","server-cmd","server-args","cache-dir","out-path","err-path","out","js/shadow.js.shim.module$fs.openSync","G__83301","G__83302","G__83303","shadow.cljs.npm.cli/server-stop","server-port-file","server-pid-file","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$0","cli-repl","js/parseInt","G__83304","js/shadow.js.shim.module$net.connect","cljs.core.async/close!","shadow.cljs.npm.cli/defaults","p__83305","map__83306","shadow.cljs.npm.cli/merge-config-with-cli-opts","options","map__83308","G__83310","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/into","G__83312","shadow.cljs.npm.cli/print-classpath-tree","js/Error","shadow.cljs.npm.cli.print_classpath_tree.cljs$core$IFn$_invoke$arity$2","level","seq__83313","chunk__83314","count__83315","i__83316","vec__83323","temp__5457__auto__","cljs.core/chunked-seq?","c__4550__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__83326","coord","coord-deps","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","p__83329","map__83330","shadow.cljs.npm.cli/print-cli-info","config-path","G__83332","G__83333","G__83334","G__83335","cljs.core/println","js/__filename","seq__83336","chunk__83337","count__83338","i__83339","source-path","map__83340","deps-hierarchy","cp-data","shadow.cljs.npm.cli.print_classpath_tree.cljs$core$IFn$_invoke$arity$1","shadow.cljs.npm.cli/getenv","envname","shadow.cljs.npm.cli/read-config","e83343","G__83345","fexpr__83344","p1__83342#","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3","goog.string/format","shadow.cljs.npm.cli/guess-node-package-manager","yarn-lock","shadow.cljs.npm.cli/check-project-install!","package-json-file","G__83347","pkg","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","vec__83348","pkg-cmd","pkg-args","G__83351","cljs.core/Keyword","G__83352","G__83353","G__83354","shadow.cljs.npm.cli/generate-xml","struct","cljs.core/vector?","vec__83355","seq__83356","first__83357","attrs","more","p__83370","vec__83371","key","value","ns","cljs.core/rest","p__83374","map__83375","shadow.cljs.npm.cli/generate-pom","pom-path","G__83378","project-name","js/shadow.js.shim.module$path.basename","G__83379","G__83380","p__83386","vec__83387","seq__83388","first__83389","dep-sym","dep-version","G__83390","shadow.cljs.npm.cli/is-server-running?","server-pid","pid","e83391","js/process.kill","e","shadow.cljs.npm.cli/do-start","shadow.cljs.npm.cli/main","e83392","map__83393","action","shadow.cljs.devtools.cli-opts/parse","shadow.cljs.devtools.cli-opts/help","map__83395","js/shadow.js.shim.module$path.dirname","server-running?","G__83397","js/shadow.js.shim.module$mkdirp.sync","js/process.version","c__44666__auto__","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/run","f__44667__auto__","switch__44181__auto__","state_83407","state_val_83408","statearr-83409","statearr-83410","inst_83399","cljs.core.async.impl.ioc-helpers/take!","statearr-83411","inst_83404","inst_83405","statearr-83412","cljs.core.async.impl.ioc-helpers/return-chan","inst_83401","statearr-83413","statearr-83414","state-machine__44182__auto__","ret-value__44183__auto__","result__44184__auto__","cljs.core/keyword-identical?","e83415","js/Object","ex__44185__auto__","statearr-83416","cljs.core.async.impl.ioc-helpers/process-exception","state__44668__auto__","statearr-83417","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","shadow.cljs.npm.client/run"]}