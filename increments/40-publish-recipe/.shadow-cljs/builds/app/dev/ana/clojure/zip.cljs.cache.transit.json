["^ ","~:output",["^ ","~:js","goog.provide('clojure.zip');\ngoog.require('cljs.core');\n/**\n * Creates a new zipper structure. \n * \n *   branch? is a fn that, given a node, returns true if can have\n *   children, even if it currently doesn't.\n * \n *   children is a fn that, given a branch node, returns a seq of its\n *   children.\n * \n *   make-node is a fn that, given an existing node and a seq of\n *   children, returns a new branch node with the supplied children.\n *   root is the root node.\n */\nclojure.zip.zipper = (function clojure$zip$zipper(branch_QMARK_,children,make_node,root){\nreturn cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [root,null], null),new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(\"zip\",\"branch?\",\"zip/branch?\",-998880862),branch_QMARK_,new cljs.core.Keyword(\"zip\",\"children\",\"zip/children\",-940194589),children,new cljs.core.Keyword(\"zip\",\"make-node\",\"zip/make-node\",1103800591),make_node], null));\n});\n/**\n * Returns a zipper for nested sequences, given a root sequence\n */\nclojure.zip.seq_zip = (function clojure$zip$seq_zip(root){\nreturn clojure.zip.zipper(cljs.core.seq_QMARK_,cljs.core.identity,(function (node,children){\nreturn cljs.core.with_meta(children,cljs.core.meta(node));\n}),root);\n});\n/**\n * Returns a zipper for nested vectors, given a root vector\n */\nclojure.zip.vector_zip = (function clojure$zip$vector_zip(root){\nreturn clojure.zip.zipper(cljs.core.vector_QMARK_,cljs.core.seq,(function (node,children){\nreturn cljs.core.with_meta(cljs.core.vec(children),cljs.core.meta(node));\n}),root);\n});\n/**\n * Returns a zipper for xml elements (as from xml/parse),\n *   given a root element\n */\nclojure.zip.xml_zip = (function clojure$zip$xml_zip(root){\nreturn clojure.zip.zipper(cljs.core.complement(cljs.core.string_QMARK_),cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.seq,new cljs.core.Keyword(null,\"content\",\"content\",15833224)),(function (node,children){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(node,new cljs.core.Keyword(null,\"content\",\"content\",15833224),(function (){var and__4120__auto__ = children;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.vector,children);\n} else {\nreturn and__4120__auto__;\n}\n})());\n}),root);\n});\n/**\n * Returns the node at loc\n */\nclojure.zip.node = (function clojure$zip$node(loc){\nreturn (loc.cljs$core$IFn$_invoke$arity$1 ? loc.cljs$core$IFn$_invoke$arity$1((0)) : loc.call(null,(0)));\n});\n/**\n * Returns true if the node at loc is a branch\n */\nclojure.zip.branch_QMARK_ = (function clojure$zip$branch_QMARK_(loc){\nvar G__30509 = clojure.zip.node(loc);\nvar fexpr__30508 = new cljs.core.Keyword(\"zip\",\"branch?\",\"zip/branch?\",-998880862).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(loc));\nreturn (fexpr__30508.cljs$core$IFn$_invoke$arity$1 ? fexpr__30508.cljs$core$IFn$_invoke$arity$1(G__30509) : fexpr__30508.call(null,G__30509));\n});\n/**\n * Returns a seq of the children of node at loc, which must be a branch\n */\nclojure.zip.children = (function clojure$zip$children(loc){\nif(cljs.core.truth_(clojure.zip.branch_QMARK_(loc))){\nvar G__30512 = clojure.zip.node(loc);\nvar fexpr__30511 = new cljs.core.Keyword(\"zip\",\"children\",\"zip/children\",-940194589).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(loc));\nreturn (fexpr__30511.cljs$core$IFn$_invoke$arity$1 ? fexpr__30511.cljs$core$IFn$_invoke$arity$1(G__30512) : fexpr__30511.call(null,G__30512));\n} else {\nthrow \"called children on a leaf node\";\n}\n});\n/**\n * Returns a new branch node, given an existing node and new\n *   children. The loc is only used to supply the constructor.\n */\nclojure.zip.make_node = (function clojure$zip$make_node(loc,node,children){\nvar fexpr__30514 = new cljs.core.Keyword(\"zip\",\"make-node\",\"zip/make-node\",1103800591).cljs$core$IFn$_invoke$arity$1(cljs.core.meta(loc));\nreturn (fexpr__30514.cljs$core$IFn$_invoke$arity$2 ? fexpr__30514.cljs$core$IFn$_invoke$arity$2(node,children) : fexpr__30514.call(null,node,children));\n});\n/**\n * Returns a seq of nodes leading to this loc\n */\nclojure.zip.path = (function clojure$zip$path(loc){\nreturn new cljs.core.Keyword(null,\"pnodes\",\"pnodes\",1739080565).cljs$core$IFn$_invoke$arity$1((loc.cljs$core$IFn$_invoke$arity$1 ? loc.cljs$core$IFn$_invoke$arity$1((1)) : loc.call(null,(1))));\n});\n/**\n * Returns a seq of the left siblings of this loc\n */\nclojure.zip.lefts = (function clojure$zip$lefts(loc){\nreturn cljs.core.seq(new cljs.core.Keyword(null,\"l\",\"l\",1395893423).cljs$core$IFn$_invoke$arity$1((loc.cljs$core$IFn$_invoke$arity$1 ? loc.cljs$core$IFn$_invoke$arity$1((1)) : loc.call(null,(1)))));\n});\n/**\n * Returns a seq of the right siblings of this loc\n */\nclojure.zip.rights = (function clojure$zip$rights(loc){\nreturn new cljs.core.Keyword(null,\"r\",\"r\",-471384190).cljs$core$IFn$_invoke$arity$1((loc.cljs$core$IFn$_invoke$arity$1 ? loc.cljs$core$IFn$_invoke$arity$1((1)) : loc.call(null,(1))));\n});\n/**\n * Returns the loc of the leftmost child of the node at this loc, or\n *   nil if no children\n */\nclojure.zip.down = (function clojure$zip$down(loc){\nif(cljs.core.truth_(clojure.zip.branch_QMARK_(loc))){\nvar vec__30518 = loc;\nvar node = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30518,(0),null);\nvar path = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30518,(1),null);\nvar vec__30521 = clojure.zip.children(loc);\nvar seq__30522 = cljs.core.seq(vec__30521);\nvar first__30523 = cljs.core.first(seq__30522);\nvar seq__30522__$1 = cljs.core.next(seq__30522);\nvar c = first__30523;\nvar cnext = seq__30522__$1;\nvar cs = vec__30521;\nif(cljs.core.truth_(cs)){\nreturn cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [c,new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null,\"l\",\"l\",1395893423),cljs.core.PersistentVector.EMPTY,new cljs.core.Keyword(null,\"pnodes\",\"pnodes\",1739080565),(cljs.core.truth_(path)?cljs.core.conj.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"pnodes\",\"pnodes\",1739080565).cljs$core$IFn$_invoke$arity$1(path),node):new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [node], null)),new cljs.core.Keyword(null,\"ppath\",\"ppath\",-1758182784),path,new cljs.core.Keyword(null,\"r\",\"r\",-471384190),cnext], null)], null),cljs.core.meta(loc));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\n/**\n * Returns the loc of the parent of the node at this loc, or nil if at\n *   the top\n */\nclojure.zip.up = (function clojure$zip$up(loc){\nvar vec__30525 = loc;\nvar node = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30525,(0),null);\nvar map__30528 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30525,(1),null);\nvar map__30528__$1 = (((((!((map__30528 == null))))?(((((map__30528.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__30528.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__30528):map__30528);\nvar path = map__30528__$1;\nvar l = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30528__$1,new cljs.core.Keyword(null,\"l\",\"l\",1395893423));\nvar ppath = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30528__$1,new cljs.core.Keyword(null,\"ppath\",\"ppath\",-1758182784));\nvar pnodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30528__$1,new cljs.core.Keyword(null,\"pnodes\",\"pnodes\",1739080565));\nvar r = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30528__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nvar changed_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30528__$1,new cljs.core.Keyword(null,\"changed?\",\"changed?\",-437828330));\nif(cljs.core.truth_(pnodes)){\nvar pnode = cljs.core.peek(pnodes);\nreturn cljs.core.with_meta((cljs.core.truth_(changed_QMARK_)?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.zip.make_node(loc,pnode,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(l,cljs.core.cons(node,r))),(function (){var and__4120__auto__ = ppath;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ppath,new cljs.core.Keyword(null,\"changed?\",\"changed?\",-437828330),true);\n} else {\nreturn and__4120__auto__;\n}\n})()], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [pnode,ppath], null)),cljs.core.meta(loc));\n} else {\nreturn null;\n}\n});\n/**\n * zips all the way up and returns the root node, reflecting any\n *  changes.\n */\nclojure.zip.root = (function clojure$zip$root(loc){\nwhile(true){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"end\",\"end\",-268185958),(loc.cljs$core$IFn$_invoke$arity$1 ? loc.cljs$core$IFn$_invoke$arity$1((1)) : loc.call(null,(1))))){\nreturn clojure.zip.node(loc);\n} else {\nvar p = clojure.zip.up(loc);\nif(cljs.core.truth_(p)){\nvar G__30650 = p;\nloc = G__30650;\ncontinue;\n} else {\nreturn clojure.zip.node(loc);\n}\n}\nbreak;\n}\n});\n/**\n * Returns the loc of the right sibling of the node at this loc, or nil\n */\nclojure.zip.right = (function clojure$zip$right(loc){\nvar vec__30533 = loc;\nvar node = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30533,(0),null);\nvar map__30536 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30533,(1),null);\nvar map__30536__$1 = (((((!((map__30536 == null))))?(((((map__30536.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__30536.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__30536):map__30536);\nvar path = map__30536__$1;\nvar l = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30536__$1,new cljs.core.Keyword(null,\"l\",\"l\",1395893423));\nvar vec__30537 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30536__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nvar seq__30538 = cljs.core.seq(vec__30537);\nvar first__30539 = cljs.core.first(seq__30538);\nvar seq__30538__$1 = cljs.core.next(seq__30538);\nvar r = first__30539;\nvar rnext = seq__30538__$1;\nvar rs = vec__30537;\nif(cljs.core.truth_((function (){var and__4120__auto__ = path;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn rs;\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [r,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(path,new cljs.core.Keyword(null,\"l\",\"l\",1395893423),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(l,node),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"r\",\"r\",-471384190),rnext], 0))], null),cljs.core.meta(loc));\n} else {\nreturn null;\n}\n});\n/**\n * Returns the loc of the rightmost sibling of the node at this loc, or self\n */\nclojure.zip.rightmost = (function clojure$zip$rightmost(loc){\nvar vec__30553 = loc;\nvar node = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30553,(0),null);\nvar map__30556 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30553,(1),null);\nvar map__30556__$1 = (((((!((map__30556 == null))))?(((((map__30556.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__30556.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__30556):map__30556);\nvar path = map__30556__$1;\nvar l = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30556__$1,new cljs.core.Keyword(null,\"l\",\"l\",1395893423));\nvar r = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30556__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nif(cljs.core.truth_((function (){var and__4120__auto__ = path;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn r;\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.last(r),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(path,new cljs.core.Keyword(null,\"l\",\"l\",1395893423),cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.conj,l,node,cljs.core.butlast(r)),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"r\",\"r\",-471384190),null], 0))], null),cljs.core.meta(loc));\n} else {\nreturn loc;\n}\n});\n/**\n * Returns the loc of the left sibling of the node at this loc, or nil\n */\nclojure.zip.left = (function clojure$zip$left(loc){\nvar vec__30559 = loc;\nvar node = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30559,(0),null);\nvar map__30562 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30559,(1),null);\nvar map__30562__$1 = (((((!((map__30562 == null))))?(((((map__30562.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__30562.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__30562):map__30562);\nvar path = map__30562__$1;\nvar l = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30562__$1,new cljs.core.Keyword(null,\"l\",\"l\",1395893423));\nvar r = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30562__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nif(cljs.core.truth_((function (){var and__4120__auto__ = path;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.seq(l);\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.peek(l),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(path,new cljs.core.Keyword(null,\"l\",\"l\",1395893423),cljs.core.pop(l),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"r\",\"r\",-471384190),cljs.core.cons(node,r)], 0))], null),cljs.core.meta(loc));\n} else {\nreturn null;\n}\n});\n/**\n * Returns the loc of the leftmost sibling of the node at this loc, or self\n */\nclojure.zip.leftmost = (function clojure$zip$leftmost(loc){\nvar vec__30566 = loc;\nvar node = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30566,(0),null);\nvar map__30569 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30566,(1),null);\nvar map__30569__$1 = (((((!((map__30569 == null))))?(((((map__30569.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__30569.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__30569):map__30569);\nvar path = map__30569__$1;\nvar l = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30569__$1,new cljs.core.Keyword(null,\"l\",\"l\",1395893423));\nvar r = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30569__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nif(cljs.core.truth_((function (){var and__4120__auto__ = path;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.seq(l);\n} else {\nreturn and__4120__auto__;\n}\n})())){\nreturn cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.first(l),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(path,new cljs.core.Keyword(null,\"l\",\"l\",1395893423),cljs.core.PersistentVector.EMPTY,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"r\",\"r\",-471384190),cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(cljs.core.rest(l),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [node], null),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([r], 0))], 0))], null),cljs.core.meta(loc));\n} else {\nreturn loc;\n}\n});\n/**\n * Inserts the item as the left sibling of the node at this loc,\n *  without moving\n */\nclojure.zip.insert_left = (function clojure$zip$insert_left(loc,item){\nvar vec__30572 = loc;\nvar node = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30572,(0),null);\nvar map__30575 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30572,(1),null);\nvar map__30575__$1 = (((((!((map__30575 == null))))?(((((map__30575.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__30575.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__30575):map__30575);\nvar path = map__30575__$1;\nvar l = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30575__$1,new cljs.core.Keyword(null,\"l\",\"l\",1395893423));\nif((path == null)){\nthrow \"Insert at top\";\n} else {\nreturn cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(path,new cljs.core.Keyword(null,\"l\",\"l\",1395893423),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(l,item),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"changed?\",\"changed?\",-437828330),true], 0))], null),cljs.core.meta(loc));\n}\n});\n/**\n * Inserts the item as the right sibling of the node at this loc,\n *   without moving\n */\nclojure.zip.insert_right = (function clojure$zip$insert_right(loc,item){\nvar vec__30577 = loc;\nvar node = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30577,(0),null);\nvar map__30580 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30577,(1),null);\nvar map__30580__$1 = (((((!((map__30580 == null))))?(((((map__30580.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__30580.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__30580):map__30580);\nvar path = map__30580__$1;\nvar r = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30580__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nif((path == null)){\nthrow \"Insert at top\";\n} else {\nreturn cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node,cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(path,new cljs.core.Keyword(null,\"r\",\"r\",-471384190),cljs.core.cons(item,r),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"changed?\",\"changed?\",-437828330),true], 0))], null),cljs.core.meta(loc));\n}\n});\n/**\n * Replaces the node at this loc, without moving\n */\nclojure.zip.replace = (function clojure$zip$replace(loc,node){\nvar vec__30582 = loc;\nvar _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30582,(0),null);\nvar path = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30582,(1),null);\nreturn cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [node,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(path,new cljs.core.Keyword(null,\"changed?\",\"changed?\",-437828330),true)], null),cljs.core.meta(loc));\n});\n/**\n * Replaces the node at this loc with the value of (f node args)\n */\nclojure.zip.edit = (function clojure$zip$edit(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___30677 = arguments.length;\nvar i__4731__auto___30678 = (0);\nwhile(true){\nif((i__4731__auto___30678 < len__4730__auto___30677)){\nargs__4736__auto__.push((arguments[i__4731__auto___30678]));\n\nvar G__30679 = (i__4731__auto___30678 + (1));\ni__4731__auto___30678 = G__30679;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((2) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((2)),(0),null)):null);\nreturn clojure.zip.edit.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4737__auto__);\n});\n\nclojure.zip.edit.cljs$core$IFn$_invoke$arity$variadic = (function (loc,f,args){\nreturn clojure.zip.replace(loc,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,clojure.zip.node(loc),args));\n});\n\nclojure.zip.edit.cljs$lang$maxFixedArity = (2);\n\n/** @this {Function} */\nclojure.zip.edit.cljs$lang$applyTo = (function (seq30585){\nvar G__30586 = cljs.core.first(seq30585);\nvar seq30585__$1 = cljs.core.next(seq30585);\nvar G__30587 = cljs.core.first(seq30585__$1);\nvar seq30585__$2 = cljs.core.next(seq30585__$1);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__30586,G__30587,seq30585__$2);\n});\n\n/**\n * Inserts the item as the leftmost child of the node at this loc,\n *   without moving\n */\nclojure.zip.insert_child = (function clojure$zip$insert_child(loc,item){\nreturn clojure.zip.replace(loc,clojure.zip.make_node(loc,clojure.zip.node(loc),cljs.core.cons(item,clojure.zip.children(loc))));\n});\n/**\n * Inserts the item as the rightmost child of the node at this loc,\n *   without moving\n */\nclojure.zip.append_child = (function clojure$zip$append_child(loc,item){\nreturn clojure.zip.replace(loc,clojure.zip.make_node(loc,clojure.zip.node(loc),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(clojure.zip.children(loc),new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [item], null))));\n});\n/**\n * Moves to the next loc in the hierarchy, depth-first. When reaching\n *   the end, returns a distinguished loc detectable via end?. If already\n *   at the end, stays there.\n */\nclojure.zip.next = (function clojure$zip$next(loc){\nif(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"end\",\"end\",-268185958),(loc.cljs$core$IFn$_invoke$arity$1 ? loc.cljs$core$IFn$_invoke$arity$1((1)) : loc.call(null,(1))))){\nreturn loc;\n} else {\nvar or__4131__auto__ = (function (){var and__4120__auto__ = clojure.zip.branch_QMARK_(loc);\nif(cljs.core.truth_(and__4120__auto__)){\nreturn clojure.zip.down(loc);\n} else {\nreturn and__4120__auto__;\n}\n})();\nif(cljs.core.truth_(or__4131__auto__)){\nreturn or__4131__auto__;\n} else {\nvar or__4131__auto____$1 = clojure.zip.right(loc);\nif(cljs.core.truth_(or__4131__auto____$1)){\nreturn or__4131__auto____$1;\n} else {\nvar p = loc;\nwhile(true){\nif(cljs.core.truth_(clojure.zip.up(p))){\nvar or__4131__auto____$2 = clojure.zip.right(clojure.zip.up(p));\nif(cljs.core.truth_(or__4131__auto____$2)){\nreturn or__4131__auto____$2;\n} else {\nvar G__30687 = clojure.zip.up(p);\np = G__30687;\ncontinue;\n}\n} else {\nreturn new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.zip.node(p),new cljs.core.Keyword(null,\"end\",\"end\",-268185958)], null);\n}\nbreak;\n}\n}\n}\n}\n});\n/**\n * Moves to the previous loc in the hierarchy, depth-first. If already\n *   at the root, returns nil.\n */\nclojure.zip.prev = (function clojure$zip$prev(loc){\nvar temp__5455__auto__ = clojure.zip.left(loc);\nif(cljs.core.truth_(temp__5455__auto__)){\nvar lloc = temp__5455__auto__;\nvar loc__$1 = lloc;\nwhile(true){\nvar temp__5455__auto____$1 = (function (){var and__4120__auto__ = clojure.zip.branch_QMARK_(loc__$1);\nif(cljs.core.truth_(and__4120__auto__)){\nreturn clojure.zip.down(loc__$1);\n} else {\nreturn and__4120__auto__;\n}\n})();\nif(cljs.core.truth_(temp__5455__auto____$1)){\nvar child = temp__5455__auto____$1;\nvar G__30688 = clojure.zip.rightmost(child);\nloc__$1 = G__30688;\ncontinue;\n} else {\nreturn loc__$1;\n}\nbreak;\n}\n} else {\nreturn clojure.zip.up(loc);\n}\n});\n/**\n * Returns true if loc represents the end of a depth-first walk\n */\nclojure.zip.end_QMARK_ = (function clojure$zip$end_QMARK_(loc){\nreturn cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(new cljs.core.Keyword(null,\"end\",\"end\",-268185958),(loc.cljs$core$IFn$_invoke$arity$1 ? loc.cljs$core$IFn$_invoke$arity$1((1)) : loc.call(null,(1))));\n});\n/**\n * Removes the node at loc, returning the loc that would have preceded\n *   it in a depth-first walk.\n */\nclojure.zip.remove = (function clojure$zip$remove(loc){\nvar vec__30603 = loc;\nvar node = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30603,(0),null);\nvar map__30606 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__30603,(1),null);\nvar map__30606__$1 = (((((!((map__30606 == null))))?(((((map__30606.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__30606.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__30606):map__30606);\nvar path = map__30606__$1;\nvar l = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30606__$1,new cljs.core.Keyword(null,\"l\",\"l\",1395893423));\nvar ppath = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30606__$1,new cljs.core.Keyword(null,\"ppath\",\"ppath\",-1758182784));\nvar pnodes = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30606__$1,new cljs.core.Keyword(null,\"pnodes\",\"pnodes\",1739080565));\nvar rs = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__30606__$1,new cljs.core.Keyword(null,\"r\",\"r\",-471384190));\nif((path == null)){\nthrow \"Remove at top\";\n} else {\nif((cljs.core.count(l) > (0))){\nvar loc__$1 = cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.peek(l),cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(path,new cljs.core.Keyword(null,\"l\",\"l\",1395893423),cljs.core.pop(l),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"changed?\",\"changed?\",-437828330),true], 0))], null),cljs.core.meta(loc));\nwhile(true){\nvar temp__5455__auto__ = (function (){var and__4120__auto__ = clojure.zip.branch_QMARK_(loc__$1);\nif(cljs.core.truth_(and__4120__auto__)){\nreturn clojure.zip.down(loc__$1);\n} else {\nreturn and__4120__auto__;\n}\n})();\nif(cljs.core.truth_(temp__5455__auto__)){\nvar child = temp__5455__auto__;\nvar G__30694 = clojure.zip.rightmost(child);\nloc__$1 = G__30694;\ncontinue;\n} else {\nreturn loc__$1;\n}\nbreak;\n}\n} else {\nreturn cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [clojure.zip.make_node(loc,cljs.core.peek(pnodes),rs),(function (){var and__4120__auto__ = ppath;\nif(cljs.core.truth_(and__4120__auto__)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ppath,new cljs.core.Keyword(null,\"changed?\",\"changed?\",-437828330),true);\n} else {\nreturn and__4120__auto__;\n}\n})()], null),cljs.core.meta(loc));\n}\n}\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/zip.cljs","~:line",15,"~:column",3,"~:end-line",15,"~:end-column",14,"~:doc","Functional hierarchical zipper, with navigation, editing,\n  and enumeration.  See Huet","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",["~$remove","~$replace","~$next"]],"~:name","~$clojure.zip","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^P","~$goog","^Q"],"~:seen",["^F",[]],"~:uses",null,"~:require-macros",["^ ","^P","^P"],"~:form",["~#list",["~$ns","^K",["^V",["~:refer-clojure","~:exclude",["^V",["^H","^G","^I"]]]]]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^Q","^P"]],"^M","^K","~:resource-id",["~:shadow.build.classpath/resource","clojure/zip.cljs"],"~:compiled-at",1552917528300,"~:resource-name","clojure/zip.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n;functional hierarchical zipper, with navigation, editing and enumeration\n;see Huet\n\n(ns ^{:doc \"Functional hierarchical zipper, with navigation, editing,\n  and enumeration.  See Huet\"\n       :author \"Rich Hickey\"}\n  clojure.zip\n  (:refer-clojure :exclude (replace remove next)))\n\n(defn zipper\n  \"Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node.\"\n  [branch? children make-node root]\n    ^{:zip/branch? branch? :zip/children children :zip/make-node make-node}\n    [root nil])\n\n(defn seq-zip\n  \"Returns a zipper for nested sequences, given a root sequence\"\n  [root]\n    (zipper seq?\n            identity\n            (fn [node children] (with-meta children (meta node)))\n            root))\n\n(defn vector-zip\n  \"Returns a zipper for nested vectors, given a root vector\"\n  [root]\n    (zipper vector?\n            seq\n            (fn [node children] (with-meta (vec children) (meta node)))\n            root))\n\n(defn xml-zip\n  \"Returns a zipper for xml elements (as from xml/parse),\n  given a root element\"\n  [root]\n    (zipper (complement string?) \n            (comp seq :content)\n            (fn [node children]\n              (assoc node :content (and children (apply vector children))))\n            root))\n\n(defn node\n  \"Returns the node at loc\"\n  [loc] (loc 0))\n\n(defn branch?\n  \"Returns true if the node at loc is a branch\"\n  [loc]\n    ((:zip/branch? (meta loc)) (node loc)))\n\n(defn children\n  \"Returns a seq of the children of node at loc, which must be a branch\"\n  [loc]\n    (if (branch? loc)\n      ((:zip/children (meta loc)) (node loc))\n      (throw \"called children on a leaf node\")))\n\n(defn make-node\n  \"Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor.\"\n  [loc node children]\n    ((:zip/make-node (meta loc)) node children))\n\n(defn path\n  \"Returns a seq of nodes leading to this loc\"\n  [loc]\n    (:pnodes (loc 1)))\n\n(defn lefts\n  \"Returns a seq of the left siblings of this loc\"\n  [loc]\n    (seq (:l (loc 1))))\n\n(defn rights\n  \"Returns a seq of the right siblings of this loc\"\n  [loc]\n    (:r (loc 1)))\n\n\n(defn down\n  \"Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children\"\n  [loc]\n    (when (branch? loc)\n      (let [[node path] loc\n            [c & cnext :as cs] (children loc)]\n        (when cs\n          (with-meta [c {:l [] \n                         :pnodes (if path (conj (:pnodes path) node) [node]) \n                         :ppath path \n                         :r cnext}] (meta loc))))))\n\n(defn up\n  \"Returns the loc of the parent of the node at this loc, or nil if at\n  the top\"\n  [loc]\n    (let [[node {l :l, ppath :ppath, pnodes :pnodes r :r, changed? :changed?, :as path}] loc]\n      (when pnodes\n        (let [pnode (peek pnodes)]\n          (with-meta (if changed?\n                       [(make-node loc pnode (concat l (cons node r))) \n                        (and ppath (assoc ppath :changed? true))]\n                       [pnode ppath])\n                     (meta loc))))))\n\n(defn root\n  \"zips all the way up and returns the root node, reflecting any\n changes.\"\n  [loc]\n    (if (= :end (loc 1))\n      (node loc)\n      (let [p (up loc)]\n        (if p\n          (recur p)\n          (node loc)))))\n\n(defn right\n  \"Returns the loc of the right sibling of the node at this loc, or nil\"\n  [loc]\n    (let [[node {l :l  [r & rnext :as rs] :r :as path}] loc]\n      (when (and path rs)\n        (with-meta [r (assoc path :l (conj l node) :r rnext)] (meta loc)))))\n\n(defn rightmost\n  \"Returns the loc of the rightmost sibling of the node at this loc, or self\"\n  [loc]\n    (let [[node {l :l r :r :as path}] loc]\n      (if (and path r)\n        (with-meta [(last r) (assoc path :l (apply conj l node (butlast r)) :r nil)] (meta loc))\n        loc)))\n\n(defn left\n  \"Returns the loc of the left sibling of the node at this loc, or nil\"\n  [loc]\n    (let [[node {l :l r :r :as path}] loc]\n      (when (and path (seq l))\n        (with-meta [(peek l) (assoc path :l (pop l) :r (cons node r))] (meta loc)))))\n\n(defn leftmost\n  \"Returns the loc of the leftmost sibling of the node at this loc, or self\"\n  [loc]\n    (let [[node {l :l r :r :as path}] loc]\n      (if (and path (seq l))\n        (with-meta [(first l) (assoc path :l [] :r (concat (rest l) [node] r))] (meta loc))\n        loc)))\n\n(defn insert-left\n  \"Inserts the item as the left sibling of the node at this loc,\n without moving\"\n  [loc item]\n    (let [[node {l :l :as path}] loc]\n      (if (nil? path)\n        (throw \"Insert at top\")\n        (with-meta [node (assoc path :l (conj l item) :changed? true)] (meta loc)))))\n\n(defn insert-right\n  \"Inserts the item as the right sibling of the node at this loc,\n  without moving\"\n  [loc item]\n    (let [[node {r :r :as path}] loc]\n      (if (nil? path)\n        (throw \"Insert at top\")\n        (with-meta [node (assoc path :r (cons item r) :changed? true)] (meta loc)))))\n\n(defn replace\n  \"Replaces the node at this loc, without moving\"\n  [loc node]\n    (let [[_ path] loc]\n      (with-meta [node (assoc path :changed? true)] (meta loc))))\n\n(defn edit\n  \"Replaces the node at this loc with the value of (f node args)\"\n  [loc f & args]\n    (replace loc (apply f (node loc) args)))\n\n(defn insert-child\n  \"Inserts the item as the leftmost child of the node at this loc,\n  without moving\"\n  [loc item]\n    (replace loc (make-node loc (node loc) (cons item (children loc)))))\n\n(defn append-child\n  \"Inserts the item as the rightmost child of the node at this loc,\n  without moving\"\n  [loc item]\n    (replace loc (make-node loc (node loc) (concat (children loc) [item]))))\n\n(defn next\n  \"Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there.\"\n  [loc]\n    (if (= :end (loc 1))\n      loc\n      (or \n       (and (branch? loc) (down loc))\n       (right loc)\n       (loop [p loc]\n         (if (up p)\n           (or (right (up p)) (recur (up p)))\n           [(node p) :end])))))\n\n(defn prev\n  \"Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil.\"\n  [loc]\n    (if-let [lloc (left loc)]\n      (loop [loc lloc]\n        (if-let [child (and (branch? loc) (down loc))]\n          (recur (rightmost child))\n          loc))\n      (up loc)))\n\n(defn end?\n  \"Returns true if loc represents the end of a depth-first walk\"\n  [loc]\n    (= :end (loc 1)))\n\n(defn remove\n  \"Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk.\"\n  [loc]\n    (let [[node {l :l, ppath :ppath, pnodes :pnodes, rs :r, :as path}] loc]\n      (if (nil? path)\n        (throw \"Remove at top\")\n        (if (pos? (count l))\n          (loop [loc (with-meta [(peek l) (assoc path :l (pop l) :changed? true)] (meta loc))]\n            (if-let [child (and (branch? loc) (down loc))]\n              (recur (rightmost child))\n              loc))\n          (with-meta [(make-node loc (peek pnodes) rs) \n                      (and ppath (assoc ppath :changed? true))]\n                     (meta loc))))))\n  \n(comment\n\n(load-file \"/Users/rich/dev/clojure/src/zip.clj\")\n(refer 'zip)\n(def data '[[a * b] + [c * d]])\n(def dz (vector-zip data))\n\n(right (down dz))\n(right (down (right (right (down dz)))))\n(lefts (right (down (right (right (down dz))))))\n(rights (right (down (right (right (down dz))))))\n(up (up (right (down (right (right (down dz)))))))\n(path (right (down (right (right (down dz))))))\n\n(-> dz down right right down right)\n(-> dz down right right down right (replace '/) root)\n(-> dz next next (edit str) next next next (replace '/) root)\n(-> dz next next next next next next next next next remove root)\n(-> dz next next next next next next next next next remove (insert-right 'e) root)\n(-> dz next next next next next next next next next remove up (append-child 'e) root)\n\n(end? (-> dz next next next next next next next next next remove next))\n\n(-> dz next remove next remove root)\n\n(loop [loc dz]\n  (if (end? loc)\n    (root loc)\n    (recur (next (if (= '* (node loc)) \n                   (replace loc '/)\n                   loc)))))\n\n(loop [loc dz]\n  (if (end? loc)\n    (root loc)\n    (recur (next (if (= '* (node loc)) \n                   (remove loc)\n                   loc)))))\n)\n","~:reader-features",["^F",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["clojure.zip/zipper","branch?","children","make-node","root","clojure.zip/seq-zip","cljs.core/seq?","cljs.core/identity","node","cljs.core/with-meta","cljs.core/meta","clojure.zip/vector-zip","cljs.core/vector?","cljs.core/seq","cljs.core/vec","clojure.zip/xml-zip","cljs.core/complement","cljs.core/string?","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","and__4120__auto__","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","clojure.zip/node","loc","clojure.zip/branch?","G__30509","fexpr__30508","clojure.zip/children","G__30512","fexpr__30511","clojure.zip/make-node","fexpr__30514","clojure.zip/path","clojure.zip/lefts","clojure.zip/rights","clojure.zip/down","vec__30518","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__30521","seq__30522","first__30523","cljs.core/first","cljs.core/next","path","c","cnext","cs","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.zip/up","vec__30525","map__30528","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","l","ppath","pnodes","r","changed?","pnode","cljs.core/peek","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/cons","clojure.zip/root","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p","clojure.zip/right","vec__30533","map__30536","vec__30537","seq__30538","first__30539","rnext","rs","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","clojure.zip/rightmost","vec__30553","map__30556","cljs.core/last","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","cljs.core/butlast","clojure.zip/left","vec__30559","map__30562","cljs.core/pop","clojure.zip/leftmost","vec__30566","map__30569","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/rest","clojure.zip/insert-left","item","vec__30572","map__30575","clojure.zip/insert-right","vec__30577","map__30580","clojure.zip/replace","vec__30582","_","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","clojure.zip/edit","seq30585","G__30586","G__30587","self__4717__auto__","f","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","clojure.zip/insert-child","clojure.zip/append-child","clojure.zip/next","or__4131__auto__","clojure.zip/prev","temp__5455__auto__","lloc","child","clojure.zip/end?","clojure.zip/remove","vec__30603","map__30606","cljs.core/count"]]],"~:cache-keys",["~#cmap",[["~:macro","^P"],[1549013760000],["^12","goog/math/math.js"],[1538195417000,"^Q","~$goog.array","~$goog.asserts"],["^12","goog/array/array.js"],[1538195417000,"^Q","^1A"],["^12","goog/debug/error.js"],[1538195417000,"^Q"],["^12","goog/dom/nodetype.js"],[1538195417000,"^Q"],["^12","goog/object/object.js"],[1538195417000,"^Q"],"~:SHADOW-TIMESTAMP",[1549286327000,1549013760000],["^12","goog/math/long.js"],[1538195417000,"^Q","^1A","~$goog.reflect"],["^12","goog/functions/functions.js"],[1538195417000,"^Q"],["^12","goog/structs/map.js"],[1538195417000,"^Q","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^12","goog/asserts/asserts.js"],[1538195417000,"^Q","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^12","goog/uri/uri.js"],[1538195417000,"^Q","^1@","^1A","^1I","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^12","goog/base.js"],[1538195417000],["^12","goog/structs/structs.js"],[1538195417000,"^Q","^1@","^1F"],["^12","goog/string/string.js"],[1538195417000,"^Q"],["^12","goog/reflect/reflect.js"],[1538195417000,"^Q"],["^12","clojure/zip.cljs"],[1549013760000,"^Q","^P"],["^12","goog/string/stringbuffer.js"],[1538195417000,"^Q"],["^12","goog/iter/iter.js"],[1538195417000,"^Q","^1@","^1A","~$goog.functions","~$goog.math"],["^12","cljs/core.cljs"],[1549013760000,"~$goog.math.Long","~$goog.math.Integer","^1I","^1F","^1@","~$goog.Uri","~$goog.string.StringBuffer"],["^12","goog/math/integer.js"],[1538195417000,"^Q"],["^12","goog/uri/utils.js"],[1538195417000,"^Q","^1@","^1A","^1I"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/zip.cljs","^7",15,"^8",3,"^9",15,"^:",14,"^;","Functional hierarchical zipper, with navigation, editing,\n  and enumeration.  See Huet","^<","Rich Hickey"],"^=",["^ ","^>","^?","^@","^A","^B","^C"],"^D",null,"^E",["^F",["^G","^H","^I"]],"^J","^K","^N",null,"^O",["^ ","^P","^P","^Q","^Q"],"^R",["^F",[]],"^S",null,"~:defs",["^ ","~$rightmost",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/zip.cljs","^7",142,"^8",7,"^9",142,"^:",16,"~:arglists",["^V",["~$quote",["^V",[["~$loc"]]]]],"^;","Returns the loc of the rightmost sibling of the node at this loc, or self"],"^J","~$clojure.zip/rightmost","^6","clojure/zip.cljs","^:",16,"~:method-params",["^V",[["^1["]]],"~:protocol-impl",null,"~:arglists-meta",["^V",[null,null]],"^8",1,"~:variadic?",false,"^7",142,"~:ret-tag",["^F",[null,"~$clj","~$cljs.core/MetaFn","~$clj-nil"]],"^9",142,"~:max-fixed-arity",1,"~:fn-var",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns the loc of the rightmost sibling of the node at this loc, or self"],"~$insert-child",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",194,"^8",7,"^9",194,"^:",19,"^1Y",["^V",["^1Z",["^V",[["^1[","~$item"]]]]],"^;","Inserts the item as the leftmost child of the node at this loc,\n  without moving"],"^J","~$clojure.zip/insert-child","^6","clojure/zip.cljs","^:",19,"^21",["^V",[["^1[","^2<"]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",194,"^25",["^F",["^26","^27","^28"]],"^9",194,"^29",2,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1[","^2<"]]]]],"^;","Inserts the item as the leftmost child of the node at this loc,\n  without moving"],"~$left",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",150,"^8",7,"^9",150,"^:",11,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns the loc of the left sibling of the node at this loc, or nil"],"^J","~$clojure.zip/left","^6","clojure/zip.cljs","^:",11,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",150,"^25",["^F",["^26","^27","^28"]],"^9",150,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns the loc of the left sibling of the node at this loc, or nil"],"~$path",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",82,"^8",7,"^9",82,"^:",11,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns a seq of nodes leading to this loc"],"^J","~$clojure.zip/path","^6","clojure/zip.cljs","^:",11,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",82,"^25","~$any","^9",82,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns a seq of nodes leading to this loc"],"~$leftmost",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",157,"^8",7,"^9",157,"^:",15,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns the loc of the leftmost sibling of the node at this loc, or self"],"^J","~$clojure.zip/leftmost","^6","clojure/zip.cljs","^:",15,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",157,"^25",["^F",[null,"^26","^27","^28"]],"^9",157,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns the loc of the leftmost sibling of the node at this loc, or self"],"~$append-child",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",200,"^8",7,"^9",200,"^:",19,"^1Y",["^V",["^1Z",["^V",[["^1[","^2<"]]]]],"^;","Inserts the item as the rightmost child of the node at this loc,\n  without moving"],"^J","~$clojure.zip/append-child","^6","clojure/zip.cljs","^:",19,"^21",["^V",[["^1[","^2<"]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",200,"^25",["^F",["^26","^27","^28"]],"^9",200,"^29",2,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1[","^2<"]]]]],"^;","Inserts the item as the rightmost child of the node at this loc,\n  without moving"],"~$branch?",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",64,"^8",7,"^9",64,"^:",14,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns true if the node at loc is a branch"],"^J","~$clojure.zip/branch?","^6","clojure/zip.cljs","^:",14,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",64,"^25","^2B","^9",64,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns true if the node at loc is a branch"],"~$children",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",69,"^8",7,"^9",69,"^:",15,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns a seq of the children of node at loc, which must be a branch"],"^J","~$clojure.zip/children","^6","clojure/zip.cljs","^:",15,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",69,"^25","^2B","^9",69,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns a seq of the children of node at loc, which must be a branch"],"^G",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",237,"^8",7,"^9",237,"^:",13,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk."],"^J","~$clojure.zip/remove","^6","clojure/zip.cljs","^:",13,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",237,"^25",["^F",[null,"^26","^27","^28"]],"^9",237,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Removes the node at loc, returning the loc that would have preceded\n  it in a depth-first walk."],"~$down",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",98,"^8",7,"^9",98,"^:",11,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children"],"^J","~$clojure.zip/down","^6","clojure/zip.cljs","^:",11,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",98,"^25",["^F",["^26","^27","^28"]],"^9",98,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns the loc of the leftmost child of the node at this loc, or\n  nil if no children"],"^H",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",183,"^8",7,"^9",183,"^:",14,"^1Y",["^V",["^1Z",["^V",[["^1[","~$node"]]]]],"^;","Replaces the node at this loc, without moving"],"^J","~$clojure.zip/replace","^6","clojure/zip.cljs","^:",14,"^21",["^V",[["^1[","^2N"]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",183,"^25",["^F",["^26","^27","^28"]],"^9",183,"^29",2,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1[","^2N"]]]]],"^;","Replaces the node at this loc, without moving"],"~$zipper",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",18,"^8",7,"^9",18,"^:",13,"^1Y",["^V",["^1Z",["^V",[["^2G","^2I","~$make-node","~$root"]]]]],"^;","Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node."],"^J","~$clojure.zip/zipper","^6","clojure/zip.cljs","^:",13,"^21",["^V",[["^2G","^2I","^2Q","^2R"]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",18,"^9",18,"^29",4,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^2G","^2I","^2Q","^2R"]]]]],"^;","Creates a new zipper structure. \n\n  branch? is a fn that, given a node, returns true if can have\n  children, even if it currently doesn't.\n\n  children is a fn that, given a branch node, returns a seq of its\n  children.\n\n  make-node is a fn that, given an existing node and a seq of\n  children, returns a new branch node with the supplied children.\n  root is the root node."],"~$end?",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",232,"^8",7,"^9",232,"^:",11,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns true if loc represents the end of a depth-first walk"],"^J","~$clojure.zip/end?","^6","clojure/zip.cljs","^:",11,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",232,"^25","~$boolean","^9",232,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns true if loc represents the end of a depth-first walk"],"~$edit",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",189,"^8",7,"^9",189,"^:",11,"^1Y",["^V",["^1Z",["^V",[["^1[","~$f","~$&","~$args"]]]]],"^;","Replaces the node at this loc with the value of (f node args)","~:top-fn",["^ ","^24",true,"~:fixed-arity",2,"^29",2,"^21",[["^V",["^1[","~$f","^2X"]]],"^1Y",["^V",[["^1[","~$f","~$&","^2X"]]],"^23",["^V",[null]]]],"^J","~$clojure.zip/edit","^6","clojure/zip.cljs","^:",11,"^2Y",["^ ","^24",true,"^2Z",2,"^29",2,"^21",[["^V",["^1[","~$f","^2X"]]],"^1Y",["^V",[["^1[","~$f","~$&","^2X"]]],"^23",["^V",[null]]],"^21",[["^V",["^1[","~$f","^2X"]]],"^22",null,"^2Z",2,"^23",["^V",[null]],"^8",1,"^24",true,"~:methods",[["^ ","^2Z",2,"^24",true,"~:tag",["^F",["^26","^27","^28"]]]],"^7",189,"^25","^2B","^9",189,"^29",2,"^2:",true,"^1Y",["^V",[["^1[","~$f","~$&","^2X"]]],"^;","Replaces the node at this loc with the value of (f node args)"],"^2Q",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",76,"^8",7,"^9",76,"^:",16,"^1Y",["^V",["^1Z",["^V",[["^1[","^2N","^2I"]]]]],"^;","Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor."],"^J","~$clojure.zip/make-node","^6","clojure/zip.cljs","^:",16,"^21",["^V",[["^1[","^2N","^2I"]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",76,"^25","^2B","^9",76,"^29",3,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1[","^2N","^2I"]]]]],"^;","Returns a new branch node, given an existing node and new\n  children. The loc is only used to supply the constructor."],"~$vector-zip",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",42,"^8",7,"^9",42,"^:",17,"^1Y",["^V",["^1Z",["^V",[["^2R"]]]]],"^;","Returns a zipper for nested vectors, given a root vector"],"^J","~$clojure.zip/vector-zip","^6","clojure/zip.cljs","^:",17,"^21",["^V",[["^2R"]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",42,"^25","^2B","^9",42,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^2R"]]]]],"^;","Returns a zipper for nested vectors, given a root vector"],"^2N",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",60,"^8",7,"^9",60,"^:",11,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns the node at loc"],"^J","~$clojure.zip/node","^6","clojure/zip.cljs","^:",11,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",60,"^25","^2B","^9",60,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns the node at loc"],"~$up",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",111,"^8",7,"^9",111,"^:",9,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns the loc of the parent of the node at this loc, or nil if at\n  the top"],"^J","~$clojure.zip/up","^6","clojure/zip.cljs","^:",9,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",111,"^25",["^F",["^26","^27","^28"]],"^9",111,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns the loc of the parent of the node at this loc, or nil if at\n  the top"],"~$insert-right",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",174,"^8",7,"^9",174,"^:",19,"^1Y",["^V",["^1Z",["^V",[["^1[","^2<"]]]]],"^;","Inserts the item as the right sibling of the node at this loc,\n  without moving"],"^J","~$clojure.zip/insert-right","^6","clojure/zip.cljs","^:",19,"^21",["^V",[["^1[","^2<"]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",174,"^25",["^F",["^26","^27","^28"]],"^9",174,"^29",2,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1[","^2<"]]]]],"^;","Inserts the item as the right sibling of the node at this loc,\n  without moving"],"~$rights",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",92,"^8",7,"^9",92,"^:",13,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns a seq of the right siblings of this loc"],"^J","~$clojure.zip/rights","^6","clojure/zip.cljs","^:",13,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",92,"^25","^2B","^9",92,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns a seq of the right siblings of this loc"],"^2R",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",124,"^8",7,"^9",124,"^:",11,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","zips all the way up and returns the root node, reflecting any\n changes."],"^J","~$clojure.zip/root","^6","clojure/zip.cljs","^:",11,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",124,"^25","^2B","^9",124,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","zips all the way up and returns the root node, reflecting any\n changes."],"^I",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",206,"^8",7,"^9",206,"^:",11,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."],"^J","~$clojure.zip/next","^6","clojure/zip.cljs","^:",11,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",206,"^25",["^F",[null,"^26","~$cljs.core/IVector","^2B","^27"]],"^9",206,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Moves to the next loc in the hierarchy, depth-first. When reaching\n  the end, returns a distinguished loc detectable via end?. If already\n  at the end, stays there."],"~$seq-zip",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",34,"^8",7,"^9",34,"^:",14,"^1Y",["^V",["^1Z",["^V",[["^2R"]]]]],"^;","Returns a zipper for nested sequences, given a root sequence"],"^J","~$clojure.zip/seq-zip","^6","clojure/zip.cljs","^:",14,"^21",["^V",[["^2R"]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",34,"^25","^2B","^9",34,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^2R"]]]]],"^;","Returns a zipper for nested sequences, given a root sequence"],"~$insert-left",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",165,"^8",7,"^9",165,"^:",18,"^1Y",["^V",["^1Z",["^V",[["^1[","^2<"]]]]],"^;","Inserts the item as the left sibling of the node at this loc,\n without moving"],"^J","~$clojure.zip/insert-left","^6","clojure/zip.cljs","^:",18,"^21",["^V",[["^1[","^2<"]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",165,"^25",["^F",["^26","^27","^28"]],"^9",165,"^29",2,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1[","^2<"]]]]],"^;","Inserts the item as the left sibling of the node at this loc,\n without moving"],"~$prev",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",221,"^8",7,"^9",221,"^:",11,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil."],"^J","~$clojure.zip/prev","^6","clojure/zip.cljs","^:",11,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",221,"^25",["^F",[null,"^26","^27","^28"]],"^9",221,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Moves to the previous loc in the hierarchy, depth-first. If already\n  at the root, returns nil."],"~$right",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",135,"^8",7,"^9",135,"^:",12,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns the loc of the right sibling of the node at this loc, or nil"],"^J","~$clojure.zip/right","^6","clojure/zip.cljs","^:",12,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",135,"^25",["^F",["^26","^27","^28"]],"^9",135,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns the loc of the right sibling of the node at this loc, or nil"],"~$lefts",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",87,"^8",7,"^9",87,"^:",12,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns a seq of the left siblings of this loc"],"^J","~$clojure.zip/lefts","^6","clojure/zip.cljs","^:",12,"^21",["^V",[["^1["]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",87,"^25","~$seq","^9",87,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^1["]]]]],"^;","Returns a seq of the left siblings of this loc"],"~$xml-zip",["^ ","^1X",null,"^5",["^ ","^6","clojure/zip.cljs","^7",50,"^8",7,"^9",50,"^:",14,"^1Y",["^V",["^1Z",["^V",[["^2R"]]]]],"^;","Returns a zipper for xml elements (as from xml/parse),\n  given a root element"],"^J","~$clojure.zip/xml-zip","^6","clojure/zip.cljs","^:",14,"^21",["^V",[["^2R"]]],"^22",null,"^23",["^V",[null,null]],"^8",1,"^24",false,"^7",50,"^25","^2B","^9",50,"^29",1,"^2:",true,"^1Y",["^V",["^1Z",["^V",[["^2R"]]]]],"^;","Returns a zipper for xml elements (as from xml/parse),\n  given a root element"]],"^T",["^ ","^P","^P"],"~:cljs.analyzer/constants",["^ ","^R",["^F",["~:ppath","~:zip/branch?","~:r","~:zip/children","~:content","~:l","~:zip/make-node","~:pnodes","~:changed?","~:end"]],"~:order",["^3N","^3O","^3Q","^3P","^3R","~:l","~:r","^3M","^3S","^3T"]],"^Z",["^ "],"^[",["^ "],"^10",["^Q","^P"]],"^M","^K","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1>",[["^3X","~:static-fns"],true,["^3X","~:elide-asserts"],false,["^3X","~:optimize-constants"],null,["^3X","^15"],null,["^3X","~:external-config"],null,["^3X","~:tooling-config"],null,["^3X","~:emit-constants"],null,["^3X","~:load-tests"],null,["^3X","~:infer-externs"],true,["^3X","^17"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^3X","~:fn-invoke-direct"],null,["^3X","~:source-map"],"/dev/null"]]]