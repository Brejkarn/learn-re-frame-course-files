["^ ","~:output",["^ ","~:js","goog.provide('mranderson048.re_frame.v0v10v6.re_frame.loggers');\ngoog.require('cljs.core');\ngoog.require('clojure.set');\n/**\n * Holds the current set of logging functions.\n * By default, mranderson048.re-frame.v0v10v6.re-frame uses the functions provided by js/console.\n * Use `set-loggers!` to change these defaults\n *   \n */\nmranderson048.re_frame.v0v10v6.re_frame.loggers.loggers = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null,\"log\",\"log\",-1595516004),console.log.bind(console),new cljs.core.Keyword(null,\"warn\",\"warn\",-436710552),console.warn.bind(console),new cljs.core.Keyword(null,\"error\",\"error\",-978969032),console.error.bind(console),new cljs.core.Keyword(null,\"group\",\"group\",582596132),(cljs.core.truth_(console.group)?console.group.bind(console):console.log.bind(console)),new cljs.core.Keyword(null,\"groupEnd\",\"groupEnd\",-337721382),(cljs.core.truth_(console.groupEnd)?console.groupEnd.bind(console):(function (){\nreturn cljs.core.List.EMPTY;\n}))], null));\nmranderson048.re_frame.v0v10v6.re_frame.loggers.console = (function mranderson048$re_frame$v0v10v6$re_frame$loggers$console(var_args){\nvar args__4736__auto__ = [];\nvar len__4730__auto___28093 = arguments.length;\nvar i__4731__auto___28094 = (0);\nwhile(true){\nif((i__4731__auto___28094 < len__4730__auto___28093)){\nargs__4736__auto__.push((arguments[i__4731__auto___28094]));\n\nvar G__28095 = (i__4731__auto___28094 + (1));\ni__4731__auto___28094 = G__28095;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4737__auto__ = ((((1) < args__4736__auto__.length))?(new cljs.core.IndexedSeq(args__4736__auto__.slice((1)),(0),null)):null);\nreturn mranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4737__auto__);\n});\n\nmranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$core$IFn$_invoke$arity$variadic = (function (level,args){\nif(cljs.core.contains_QMARK_(cljs.core.deref(mranderson048.re_frame.v0v10v6.re_frame.loggers.loggers),level)){\n} else {\nthrow (new Error([\"Assert failed: \",[\"re-frame: log called with unknown level: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(level)].join(''),\"\\n\",\"(contains? (clojure.core/deref loggers) level)\"].join('')));\n}\n\nreturn cljs.core.apply.cljs$core$IFn$_invoke$arity$2((function (){var G__28089 = cljs.core.deref(mranderson048.re_frame.v0v10v6.re_frame.loggers.loggers);\nreturn (level.cljs$core$IFn$_invoke$arity$1 ? level.cljs$core$IFn$_invoke$arity$1(G__28089) : level.call(null,G__28089));\n})(),args);\n});\n\nmranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$lang$maxFixedArity = (1);\n\n/** @this {Function} */\nmranderson048.re_frame.v0v10v6.re_frame.loggers.console.cljs$lang$applyTo = (function (seq28085){\nvar G__28086 = cljs.core.first(seq28085);\nvar seq28085__$1 = cljs.core.next(seq28085);\nvar self__4717__auto__ = this;\nreturn self__4717__auto__.cljs$core$IFn$_invoke$arity$variadic(G__28086,seq28085__$1);\n});\n\n/**\n * Change the set (or a subset) of logging functions used by mranderson048.re-frame.v0v10v6.re-frame.\n *   `new-loggers` should be a map with the same keys as `loggers` (above)\n */\nmranderson048.re_frame.v0v10v6.re_frame.loggers.set_loggers_BANG_ = (function mranderson048$re_frame$v0v10v6$re_frame$loggers$set_loggers_BANG_(new_loggers){\nif(cljs.core.empty_QMARK_(clojure.set.difference.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(new_loggers)),cljs.core.set(cljs.core.keys(cljs.core.deref(mranderson048.re_frame.v0v10v6.re_frame.loggers.loggers)))))){\n} else {\nthrow (new Error([\"Assert failed: \",\"Unknown keys in new-loggers\",\"\\n\",\"(empty? (difference (set (keys new-loggers)) (-> (clojure.core/deref loggers) keys set)))\"].join('')));\n}\n\nreturn cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(mranderson048.re_frame.v0v10v6.re_frame.loggers.loggers,cljs.core.merge,new_loggers);\n});\n/**\n * Get the current logging functions used by mranderson048.re-frame.v0v10v6.re-frame.\n */\nmranderson048.re_frame.v0v10v6.re_frame.loggers.get_loggers = (function mranderson048$re_frame$v0v10v6$re_frame$loggers$get_loggers(){\nreturn cljs.core.deref(mranderson048.re_frame.v0v10v6.re_frame.loggers.loggers);\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","mranderson048/re_frame/v0v10v6/re_frame/loggers.cljc","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",52],"~:ns-aliases",["^ ","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$mranderson048.re-frame.v0v10v6.re-frame.loggers","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$clojure.set","^K","~$cljs.core","^L","~$goog","^M"],"~:seen",["^D",["~:require"]],"~:uses",["^ ","~$difference","^K"],"~:require-macros",["^ ","^L","^L"],"~:form",["~#list",["~$ns","^F",["^T",["^O",["^K","~:refer",["^Q"]]]]]],"~:flags",["^ ","^O",["^D",[]]],"~:js-deps",["^ "],"~:deps",["^M","^L","^K"]],"^H","^F","~:resource-id",["~:shadow.build.classpath/resource","mranderson048/re_frame/v0v10v6/re_frame/loggers.cljc"],"~:compiled-at",1552917527196,"~:resource-name","mranderson048/re_frame/v0v10v6/re_frame/loggers.cljc","~:warnings",[],"~:source","(ns mranderson048.re-frame.v0v10v6.re-frame.loggers\n  (:require\n   [clojure.set :refer [difference]]\n   #?@(:clj [[clojure.string :as str]\n             [clojure.tools.logging :as log]])))\n\n#?(:clj (defn log [level & args]\n          (log/log level (if (= 1 (count args))\n                           (first args)\n                           (str/join \" \" args)))))\n\n\n;; XXX should loggers be put in the registrar ??\n(def ^:private loggers\n  \"Holds the current set of logging functions.\n   By default, mranderson048.re-frame.v0v10v6.re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  \"\n  (atom #?(:cljs {:log       (js/console.log.bind   js/console)\n                  :warn      (js/console.warn.bind  js/console)\n                  :error     (js/console.error.bind js/console)\n                  :group     (if (.-group js/console)         ;; console.group does not exist  < IE 11\n                               (js/console.group.bind js/console)\n                               (js/console.log.bind   js/console))\n                  :groupEnd  (if (.-groupEnd js/console)        ;; console.groupEnd does not exist  < IE 11\n                               (js/console.groupEnd.bind js/console)\n                               #())})\n        ;; clojure versions\n        #?(:clj {:log      (partial log :info)\n                 :warn     (partial log :warn)\n                 :error    (partial log :error)\n                 :group    (partial log :info)\n                 :groupEnd  #()})))\n\n(defn console\n  [level & args]\n  (assert (contains? @loggers level) (str \"re-frame: log called with unknown level: \" level))\n  (apply (level @loggers) args))\n\n\n(defn set-loggers!\n  \"Change the set (or a subset) of logging functions used by mranderson048.re-frame.v0v10v6.re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)\"\n  [new-loggers]\n  (assert  (empty? (difference (set (keys new-loggers)) (-> @loggers keys set))) \"Unknown keys in new-loggers\")\n  (swap! loggers merge new-loggers))\n\n(defn get-loggers\n  \"Get the current logging functions used by mranderson048.re-frame.v0v10v6.re-frame.\"\n  []\n  @loggers)\n","~:reader-features",["^D",["~:cljs"]],"~:cljc",true,"~:source-map-compact",["^ ","mappings",";;;AAaA;;;;;;AAAeA,AAKb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAA0B,AAACC,AAAsBC,AACvB,AAACC,AAAsBD,AACvB,AAACE,AAAsBF,AACvB,AAAI,AAASA,AACX,AAACG,AAAsBH,AACvB,AAACD,AAAsBC,AACzB,AAAA,AAAI,AAAYA,AACd,AAACI,AAAyBJ;AAD5B,AAAA;;AAU7B,AAAA,AAAA,AAAAK,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACHM,AAAQC;AADX,AAEE,AAAQ,AAAA,AAAAE,AAACC,AAAWxB,AAAQoB;AAA5B;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAA,AAAmC,AAAA,AAAiDF;;;AACpF,AAACK,AAAM,AAAAC,AAAA,AAAAH,AAAQvB;AAAR,AAAA,AAAA0B,AAAAA,AAACN,AAAAA,AAAAA;AAAgBC;;;AAH1B,AAAA,AAAA,AAAMP;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAI,AAAA;AAAA,AAAA,AAAAA,AAAAH,AAAAD;;;AAAA,AAMA;;;;AAAA,AAAMY,AAGHC;AAHH,AAIE,AAAS,AAACC,AAAO,AAACC,AAAW,AAACC,AAAI,AAACC,AAAKJ,AAAc,AAAA,AAAA,AAAAL,AAAKvB,AAAQgC,AAAKD;AAAxE;AAAA,AAAA,AAAA,AAAAT,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAACW,AAAMjC,AAAQkC,AAAMN;;AAEvB;;;AAAA,AAAMO;AAAN,AAAA,AAAAZ,AAGGvB","names",["mranderson048.re-frame.v0v10v6.re-frame.loggers/loggers","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","js/console.log.bind","js/console","js/console.warn.bind","js/console.error.bind","js/console.group.bind","js/console.groupEnd.bind","var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","mranderson048.re-frame.v0v10v6.re-frame.loggers/console","seq28085","G__28086","cljs.core/first","cljs.core/next","self__4717__auto__","level","args","js/Error","cljs.core/deref","cljs.core/contains?","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","G__28089","mranderson048.re-frame.v0v10v6.re-frame.loggers/set-loggers!","new-loggers","cljs.core/empty?","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","cljs.core/set","cljs.core/keys","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","mranderson048.re-frame.v0v10v6.re-frame.loggers/get-loggers"]]],"~:cache-keys",["~#cmap",[["~:macro","^L"],[1549013760000],["^[","goog/math/math.js"],[1538195417000,"^M","~$goog.array","~$goog.asserts"],["^[","goog/array/array.js"],[1538195417000,"^M","^1>"],["^[","mranderson048/re_frame/v0v10v6/re_frame/loggers.cljc"],[1544640735000,"^M","^L","^K"],["^[","goog/debug/error.js"],[1538195417000,"^M"],["^[","goog/dom/nodetype.js"],[1538195417000,"^M"],["^[","goog/object/object.js"],[1538195417000,"^M"],"~:SHADOW-TIMESTAMP",[1549286327000,1549013760000],["^[","goog/math/long.js"],[1538195417000,"^M","^1>","~$goog.reflect"],["^[","goog/functions/functions.js"],[1538195417000,"^M"],["^[","goog/structs/map.js"],[1538195417000,"^M","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^[","goog/asserts/asserts.js"],[1538195417000,"^M","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^[","goog/uri/uri.js"],[1538195417000,"^M","^1=","^1>","^1F","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^[","goog/base.js"],[1538195417000],["^[","goog/structs/structs.js"],[1538195417000,"^M","^1=","^1C"],["^[","goog/string/string.js"],[1538195417000,"^M"],["^[","goog/reflect/reflect.js"],[1538195417000,"^M"],["^[","goog/string/stringbuffer.js"],[1538195417000,"^M"],["^[","goog/iter/iter.js"],[1538195417000,"^M","^1=","^1>","~$goog.functions","~$goog.math"],["^[","cljs/core.cljs"],[1549013760000,"~$goog.math.Long","~$goog.math.Integer","^1F","^1C","^1=","~$goog.Uri","~$goog.string.StringBuffer"],["^[","goog/math/integer.js"],[1538195417000,"^M"],["^[","clojure/set.cljs"],[1549013760000,"^M","^L"],["^[","goog/uri/utils.js"],[1538195417000,"^M","^1=","^1>","^1F"]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/loggers.cljc","^7",1,"^8",5,"^9",1,"^:",52],"^;",["^ ","^<","^=","^>","^?","^@","^A"],"^B",null,"^C",["^D",[]],"^E","^F","^I",null,"^J",["^ ","^K","^K","^L","^L","^M","^M"],"^N",["^D",["^O"]],"~:shadow/js-access-global",["^D",["Error"]],"^P",["^ ","^Q","^K"],"~:defs",["^ ","~$loggers",["^ ","^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/loggers.cljc","^7",14,"^8",16,"^9",14,"^:",23,"~:private",true],"^1V",true,"^E","~$mranderson048.re-frame.v0v10v6.re-frame.loggers/loggers","^6","mranderson048/re_frame/v0v10v6/re_frame/loggers.cljc","^:",23,"^8",1,"^7",14,"^9",14,"~:tag","~$cljs.core/Atom","~:doc","Holds the current set of logging functions.\n   By default, mranderson048.re-frame.v0v10v6.re-frame uses the functions provided by js/console.\n   Use `set-loggers!` to change these defaults\n  "],"~$console",["^ ","~:protocol-inline",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/loggers.cljc","^7",35,"^8",7,"^9",35,"^:",14,"~:arglists",["^T",["~$quote",["^T",[["~$level","~$&","~$args"]]]]],"~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",1,"~:max-fixed-arity",1,"~:method-params",[["^T",["^23","^24"]]],"^21",["^T",[["^23","~$&","^24"]]],"~:arglists-meta",["^T",[null]]]],"^E","~$mranderson048.re-frame.v0v10v6.re-frame.loggers/console","^6","mranderson048/re_frame/v0v10v6/re_frame/loggers.cljc","^:",14,"^25",["^ ","^26",true,"^27",1,"^28",1,"^29",[["^T",["^23","^24"]]],"^21",["^T",[["^23","~$&","^24"]]],"^2:",["^T",[null]]],"^29",[["^T",["^23","^24"]]],"~:protocol-impl",null,"^27",1,"^2:",["^T",[null]],"^8",1,"^26",true,"~:methods",[["^ ","^27",1,"^26",true,"^1X","~$any"]],"^7",35,"~:ret-tag","^2>","^9",35,"^28",1,"~:fn-var",true,"^21",["^T",[["^23","~$&","^24"]]]],"~$set-loggers!",["^ ","^20",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/loggers.cljc","^7",41,"^8",7,"^9",41,"^:",19,"^21",["^T",["^22",["^T",[["~$new-loggers"]]]]],"^1Z","Change the set (or a subset) of logging functions used by mranderson048.re-frame.v0v10v6.re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"^E","~$mranderson048.re-frame.v0v10v6.re-frame.loggers/set-loggers!","^6","mranderson048/re_frame/v0v10v6/re_frame/loggers.cljc","^:",19,"^29",["^T",[["^2B"]]],"^2<",null,"^2:",["^T",[null,null]],"^8",1,"^26",false,"^7",41,"^2?",["^D",[null,"^2>"]],"^9",41,"^28",1,"^2@",true,"^21",["^T",["^22",["^T",[["^2B"]]]]],"^1Z","Change the set (or a subset) of logging functions used by mranderson048.re-frame.v0v10v6.re-frame.\n  `new-loggers` should be a map with the same keys as `loggers` (above)"],"~$get-loggers",["^ ","^20",null,"^5",["^ ","^6","mranderson048/re_frame/v0v10v6/re_frame/loggers.cljc","^7",48,"^8",7,"^9",48,"^:",18,"^21",["^T",["^22",["^T",[[]]]]],"^1Z","Get the current logging functions used by mranderson048.re-frame.v0v10v6.re-frame."],"^E","~$mranderson048.re-frame.v0v10v6.re-frame.loggers/get-loggers","^6","mranderson048/re_frame/v0v10v6/re_frame/loggers.cljc","^:",18,"^29",["^T",[[]]],"^2<",null,"^2:",["^T",[null,null]],"^8",1,"^26",false,"^7",48,"^2?","^2>","^9",48,"^28",0,"^2@",true,"^21",["^T",["^22",["^T",[[]]]]],"^1Z","Get the current logging functions used by mranderson048.re-frame.v0v10v6.re-frame."]],"^R",["^ ","^L","^L"],"~:cljs.analyzer/constants",["^ ","^N",["^D",["~:group","~:warn","~:error","~:groupEnd","~:log"]],"~:order",["^2K","^2H","^2I","^2G","^2J"]],"^W",["^ ","^O",["^D",[]]],"^X",["^ "],"^Y",["^M","^L","^K"]],"^H","^F","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^1;",[["^2O","~:static-fns"],true,["^2O","~:elide-asserts"],false,["^2O","~:optimize-constants"],null,["^2O","^12"],null,["^2O","~:external-config"],null,["^2O","~:tooling-config"],null,["^2O","~:emit-constants"],null,["^2O","~:load-tests"],null,["^2O","~:infer-externs"],true,["^2O","^14"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:dev",["^2O","~:fn-invoke-direct"],null,["^2O","~:source-map"],"/dev/null"]]]