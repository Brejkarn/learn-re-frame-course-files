{"version":3,"sources":["app/recipes/events.cljs"],"sourcesContent":["(ns app.recipes.events\n  (:require [re-frame.core :refer [reg-event-db reg-event-fx]]))\n\n(reg-event-db\n :save-recipe\n (fn [db [_ recipe-id]]\n   (let [uid (get-in db [:auth :uid])]\n     (-> db\n         (update-in [:users uid :saved] conj recipe-id)\n         (update-in [:recipes recipe-id :saved-count] inc)))))\n\n(reg-event-fx\n :delete-ingredient\n (fn [{:keys [db]} [_ ingredient-id]]\n   (let [recipe-id (get-in db [:nav :active-recipe])]\n     {:db (update-in db [:recipes recipe-id :ingredients] dissoc ingredient-id)\n      :dispatch [:close-modal]})))\n\n(reg-event-fx\n :delete-step\n (fn [{:keys [db]} [_ step-id]]\n   (let [recipe-id (get-in db [:nav :active-recipe])]\n     {:db (update-in db [:recipes recipe-id :steps] dissoc step-id)\n      :dispatch [:close-modal]})))\n\n(reg-event-fx\n :upsert-ingredient\n (fn [{:keys [db]} [_ {:keys [id name amount measure]}]]\n   (let [recipe-id (get-in db [:nav :active-recipe])\n         ingredients (get-in db [:recipes recipe-id :ingredients])\n         order (or (get-in ingredients [id :order])\n                   (inc (count ingredients)))]\n     {:db (assoc-in db [:recipes recipe-id :ingredients id] {:id id\n                                                             :order order\n                                                             :name name\n                                                             :amount amount\n                                                             :measure measure})\n      :dispatch [:close-modal]})))\n\n(reg-event-fx\n :upsert-step\n (fn [{:keys [db]} [_ {:keys [id desc]}]]\n   (let [recipe-id (get-in db [:nav :active-recipe])\n         steps (get-in db [:recipes recipe-id :steps])\n         order (or (get-in steps [id :order])\n                   (inc (count steps)))]\n     {:db (assoc-in db [:recipes recipe-id :steps id] {:id id\n                                                       :order order\n                                                       :desc desc})\n      :dispatch [:close-modal]})))\n\n(reg-event-fx\n :upsert-recipe\n (fn [{:keys [db]} [_ {:keys [name prep-time]}]]\n   (let [recipe-id (get-in db [:nav :active-recipe])\n         id (or recipe-id (keyword (str \"recipe-\" (random-uuid))))\n         uid (get-in db [:auth :uid])]\n     {:db (update-in db [:recipes id] merge {:id id\n                                             :name name\n                                             :prep-time prep-time\n                                             :cook uid\n                                             :public? false})\n      :dispatch [:close-modal]})))\n\n(reg-event-fx\n :delete-recipe\n (fn [{:keys [db]} _]\n   (let [recipe-id (get-in db [:nav :active-recipe])]\n     {:db (update-in db [:recipes] dissoc recipe-id)\n      :dispatch-n [[:set-active-page :recipes]\n                   [:set-active-nav :recipes]]\n      :navigate-to {:path \"/recipes/\"}})))\n"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","p__26211","vec__26212","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","_","recipe-id","uid","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core/inc","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__26215","p__26216","map__26217","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__26218","ingredient-id","cljs.core/dissoc","p__26222","p__26223","map__26224","vec__26225","step-id","p__26229","p__26230","map__26231","vec__26232","map__26235","id","name","amount","measure","ingredients","order","or__4131__auto__","cljs.core/count","cljs.core/assoc-in","p__26238","p__26239","map__26240","vec__26241","map__26244","desc","steps","p__26247","p__26248","map__26249","vec__26250","map__26253","prep-time","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","cljs.core/random-uuid","cljs.core/merge","p__26256","map__26257"]}