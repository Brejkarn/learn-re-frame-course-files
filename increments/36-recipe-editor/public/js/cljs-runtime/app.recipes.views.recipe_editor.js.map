{"version":3,"sources":["app/recipes/views/recipe_editor.cljs"],"sourcesContent":["(ns app.recipes.views.recipe-editor\n  (:require [reagent.core :as r]\n            [re-frame.core :as rf]\n            [clojure.string :as str]\n            [app.components.modal :refer [modal]]\n            [app.components.form-group :refer [form-group]]\n            [\"@smooth-ui/core-sc\" :refer [Row Col Button Typography]]))\n\n(defn recipe-editor\n  []\n  (let [initial-values {:name \"\" :prep-time \"\"}\n        values (r/atom initial-values)\n        open-modal (fn [{:keys [modal-name recipe]}]\n                     (rf/dispatch [:open-modal modal-name])\n                     (reset! values recipe))\n        save (fn [{:keys [name prep-time]}]\n               (rf/dispatch [:upsert-recipe {:name (str/trim name)\n                                             :prep-time (js/parseInt prep-time)}])\n               (reset! values initial-values))]\n    (fn []\n      (let [{:keys [name prep-time]} @(rf/subscribe [:recipe])]\n        [:<>\n         [:> Typography {:variant \"h2\"\n                         :py 20\n                         :class \"editable\"\n                         :font-weight 700\n                         :on-click #(open-modal {:modal-name :recipe-editor\n                                                 :recipe {:name name :prep-time prep-time}})}\n          name]\n         [modal {:modal-name :recipe-editor\n                 :header \"Recipe\"\n                 :body [:> Row\n                        [:> Col\n                         [form-group {:id :name\n                                      :label \"Name\"\n                                      :type \"text\"\n                                      :values values}]]\n                        [:> Col {:xs 4}\n                         [form-group {:id :prep-time\n                                      :label \"Cooking time (min)\"\n                                      :type \"number\"\n                                      :values values}]]]\n                 :footer [:<>\n                          (when name\n                            [:a {:href \"#\"\n                                 :on-click #(when (js/confirm \"Are you sure?\")\n                                              (rf/dispatch [:delete-recipe]))}\n                             \"Delete\"])\n                          [:> Button {:variant \"light\"\n                                      :on-click #(rf/dispatch [:close-modal])}\n                           \"Cancel\"]\n                          [:> Button {:on-click #(save @values)}\n                           \"Save\"]]}]]))))\n"],"mappings":";;;;;;;;AAQA,AAAA,AAAMA;AAAN,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMC;AACAC,AAAO,AAACC,AAAOF;AACfG,AAAW;AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAaK;AAAb,AAAAD,AAAAJ,AAAA,AAAwBM;AAAxB,AACE,AAAAC,AAAA,AAAA,AAA0BF;AAA1B,AAAA,AAAAE,AAAAA,AAACC,AAAAA,AAAAA;;AACD,AAACC,AAAOb,AAAOU;;;AAC5BI,AAAK;AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAX,AAAA,AAAAW,AAAA,AAAA,AAAA,AAAA,AAAAV,AAAAC,AAAAS,AAAAA;AAAA,AAAAR,AAAAQ,AAAA,AAAaC;AAAb,AAAAT,AAAAQ,AAAA,AAAkBE;AAAlB,AACE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAoC,AAACC,AAASH,AACL,AAACI,AAAYH;AADtD,AAAA,AAAAC,AAAAA,AAACP,AAAAA,AAAAA;;AAED,AAACC,AAAOb,AAAOD;;;AAR5B,AASE;;AAAA,AACE,AAAAuB,AAAA,AAAAC,AAAgC,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AAAjCH,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjB,AAAA,AAAAiB,AAAA,AAAA,AAAA,AAAA,AAAAhB,AAAAC,AAAAe,AAAAA;AAAA,AAAAd,AAAAc,AAAA,AAAcL;AAAd,AAAAT,AAAAc,AAAA,AAAmBJ;AAAnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEOQ;;AAFP,AAM8B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACxB,AAC2Be,AAAgBC;;AAP1E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAQID,AACAU,AAEiBC,AACCC,AACFC,AAGoB9B,AAClB6B,AACFC,AAGoB9B,AAEpB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAMiB;;AAAN,AAEkB,AAAM,AAAA,AAACc;AAAP,AACE,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACpB,AAAAA,AAAAA;;AADH;;;AAzBtC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAuBoB,AAAA,AAKIqB;;AA5BxB,AA6B2C,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACtB,AAAAA,AAAAA;;AA7B5C,AAAA,AAAA,AAAA,AAAA,AAAA,AA+BwBqB;;AA/BxB,AA+B2C,AAAA,AAAAV,AAACT,AAAMd;;AA/BlD","names":["app.recipes.views.recipe-editor/recipe-editor","initial-values","values","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","open-modal","p__23030","map__23031","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","modal-name","recipe","G__23033","re-frame.core/dispatch","cljs.core/reset!","save","p__23034","map__23035","name","prep-time","G__23037","clojure.string/trim","js/parseInt","map__23038","cljs.core/deref","G__23039","re-frame.core/subscribe","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Typography","app.components.modal/modal","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Row","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Col","app.components.form-group/form-group","js/confirm","G__23041","js/module$node_modules$$smooth_ui$core_sc$dist$smooth_ui_core_sc_cjs.Button","G__23042"]}