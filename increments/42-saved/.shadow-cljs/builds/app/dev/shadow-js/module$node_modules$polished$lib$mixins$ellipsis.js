["^ ","~:resource-id",["~:shadow.build.npm/resource","node_modules/polished/lib/mixins/ellipsis.js"],"~:js","shadow$provide.module$node_modules$polished$lib$mixins$ellipsis=function(global,process,require,module,exports,shadow$shims){exports.__esModule=!0;exports.default=void 0;exports.default=function(width){void 0===width&&(width=\"100%\");return{display:\"inline-block\",maxWidth:width,overflow:\"hidden\",textOverflow:\"ellipsis\",whiteSpace:\"nowrap\",wordWrap:\"normal\"}};module.exports=exports.default}","~:source","shadow$provide[\"module$node_modules$polished$lib$mixins$ellipsis\"] = function(global,process,require,module,exports,shadow$shims) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\n/**\n * CSS to represent truncated text with an ellipsis.\n *\n * @example\n * // Styles as object usage\n * const styles = {\n *   ...ellipsis('250px')\n * }\n *\n * // styled-components usage\n * const div = styled.div`\n *   ${ellipsis('250px')}\n * `\n *\n * // CSS as JS Output\n *\n * div: {\n *   'display': 'inline-block',\n *   'maxWidth': '250px',\n *   'overflow': 'hidden',\n *   'textOverflow': 'ellipsis',\n *   'whiteSpace': 'nowrap',\n *   'wordWrap': 'normal'\n * }\n */\nfunction ellipsis(width) {\n  if (width === void 0) {\n    width = '100%';\n  }\n\n  return {\n    display: 'inline-block',\n    maxWidth: width,\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal'\n  };\n}\n\nvar _default = ellipsis;\nexports.default = _default;\nmodule.exports = exports.default;\n};","~:removed-requires",["~#set",[]],"~:actual-requires",["^5",["~$shadow.js"]],"~:properties",["^5",["whiteSpace","__esModule","textOverflow","overflow","wordWrap","display","maxWidth","default"]],"~:compiled-at",1553958937707,"~:source-map-json","{\n\"version\":3,\n\"file\":\"module$node_modules$polished$lib$mixins$ellipsis.js\",\n\"lineCount\":1,\n\"mappings\":\"AAAAA,cAAA,iDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAGlID,OAAAE,WAAA,CAAqB,CAAA,CACrBF,QAAAG,QAAA,CAAkB,IAAK,EA2CvBH,QAAAG,QAAA,CAhBAC,QAAiB,CAACC,KAAD,CAAQ,CACT,IAAK,EAAnB,GAAIA,KAAJ,GACEA,KADF,CACU,MADV,CAIA,OAAO,CACLC,QAAS,cADJ,CAELC,SAAUF,KAFL,CAGLG,SAAU,QAHL,CAILC,aAAc,UAJT,CAKLC,WAAY,QALP,CAMLC,SAAU,QANL,CALgB,CAiBzBZ,OAAAC,QAAA,CAAiBA,OAAAG,QAhDiH;\",\n\"sources\":[\"node_modules/polished/lib/mixins/ellipsis.js\"],\n\"sourcesContent\":[\"shadow$provide[\\\"module$node_modules$polished$lib$mixins$ellipsis\\\"] = function(global,process,require,module,exports,shadow$shims) {\\n\\\"use strict\\\";\\n\\nexports.__esModule = true;\\nexports.default = void 0;\\n\\n/**\\n * CSS to represent truncated text with an ellipsis.\\n *\\n * @example\\n * // Styles as object usage\\n * const styles = {\\n *   ...ellipsis('250px')\\n * }\\n *\\n * // styled-components usage\\n * const div = styled.div`\\n *   ${ellipsis('250px')}\\n * `\\n *\\n * // CSS as JS Output\\n *\\n * div: {\\n *   'display': 'inline-block',\\n *   'maxWidth': '250px',\\n *   'overflow': 'hidden',\\n *   'textOverflow': 'ellipsis',\\n *   'whiteSpace': 'nowrap',\\n *   'wordWrap': 'normal'\\n * }\\n */\\nfunction ellipsis(width) {\\n  if (width === void 0) {\\n    width = '100%';\\n  }\\n\\n  return {\\n    display: 'inline-block',\\n    maxWidth: width,\\n    overflow: 'hidden',\\n    textOverflow: 'ellipsis',\\n    whiteSpace: 'nowrap',\\n    wordWrap: 'normal'\\n  };\\n}\\n\\nvar _default = ellipsis;\\nexports.default = _default;\\nmodule.exports = exports.default;\\n};\"],\n\"names\":[\"shadow$provide\",\"global\",\"process\",\"require\",\"module\",\"exports\",\"shadow$shims\",\"__esModule\",\"default\",\"ellipsis\",\"width\",\"display\",\"maxWidth\",\"overflow\",\"textOverflow\",\"whiteSpace\",\"wordWrap\"]\n}\n"]